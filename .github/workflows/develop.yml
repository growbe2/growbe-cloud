name: growbe cloud pipeline
on:
  push:
    branches:
      - develop

jobs:
  buildnrelease:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        program: [portal, cloud]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
      - name: Login docker
        run: docker login https://docker.pkg.github.com -u berlingoqc -p $GITHUB_ACCESS_TOKEN
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.PAT }}
      - name: Updating version
        run: echo "VERSION=$(npm run getversion:develop --silent)" >> $GITHUB_ENV
      - name: Build
        run: cd growbe-${{matrix.program}} && npm --no-git-tag-version version ${VERSION} && npm run docker:build
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.PAT }}
      - name: Publish
        run: cd growbe-${{matrix.program}} && npm run docker:push
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.PAT }}
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login docker
        run: docker login https://docker.pkg.github.com -u berlingoqc -p $GITHUB_ACCESS_TOKEN
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.PAT }}
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Updating version
        run: echo "VERSION=$(npm run getversion:develop --silent)" >> $GITHUB_ENV
      - name: Setting npmrc
        run: echo "${{ secrets.NPMRC }}" > $HOME/.npmrc
      - name: Install pgsql client
        run: sudo apt-get install postgresql
      - name: Running test 
        run: ./scripts/integration.sh test
  migrate:
    runs-on: ubuntu-latest
    needs: [buildnrelease, test]
    steps:
      - uses: actions/checkout@v1
      - name: Login docker
        run: docker login https://ghcr.io -u berlingoqc -p $GITHUB_ACCESS_TOKEN
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.PAT }}
      - name: Updating version
        run: echo "VERSION=$(npm run getversion:develop --silent)" >> $GITHUB_ENV
      - name: Setting kubeconfig
        run: mkdir -p $HOME/.kube && echo "${{ secrets.KUBECONF }}" > $HOME/.kube/config
      - name: Build and release migration image
        run: cd transactional/ && ./docker/migration_docker_release.sh
      - name: Deploy migration job to k8s
        run: cd transactional/ && ./docker/migration_k8s.sh
        env:
          DB_URL: ${{ secrets.DB_DEV }}
          MONGO_URL: ${{ secrets.MONGO_DEV }}
          NAMESPACE: growbe-dev
  deploy:
    runs-on: ubuntu-latest
    needs: [migrate]
    steps:
      - uses: actions/checkout@v1
      - name: Installing helm3
        run: curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh
      - name: Setting kubeconfig
        run: mkdir -p $HOME/.kube && echo "${{ secrets.KUBECONF }}" > $HOME/.kube/config
      - name: Updating version
        run: echo "VERSION=$(npm run getversion:develop --silent)" >> $GITHUB_ENV
      - name: Deploy to dev
        run: KUBECONFIG=$HOME/.kube/config helm upgrade growbe-cloud helm --install --wait --atomic --namespace=growbe-dev --set=cloud.version=${VERSION} --set=cloud.ghtoken=${{secrets.PAT}} --set=cloud.idrsa="${{secrets.IDRSA}}" --values=./helm/values/dev.yaml
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed to dev. ${{ github.event.head_commit.message }}'
