syntax = "proto3";

option java_package = "ca.berlingoqc.growbe_android_module.proto";

enum ActorType {
    // Operation was executed by a end user manually
    // from the cloud app most likely
    MANUAL_USER_ACTOR = 0;
    // Actor use by the system to restore state , so
    // no actor validation and modication are perform
    SYSTEM_USER_ACTOR = 1;
    // When a property is control by a virtual device
    VIRTUAL_ACTOR = 3;
    // When owned by a env controller
    ENV_CONTROLLER_ACTOR = 4;
}

enum ActorRessourceType {
    PHYSICAL_RELAY = 0;
    VIRTUAL_RELAY = 1;
}

message Actor {
    ActorType type = 1;
    string id = 2;
    string name = 3;
}

message ActorOwnership {
    ActorRessourceType type = 1;
    string ressourceId = 2;
    string property = 3;
}

message ActorWithOwnership {
    Actor actor = 1;
    repeated ActorOwnership ownerships = 2;
}

message ModuleActorOwnershipRequest {
   Actor actor = 1;
   map<string, bool> property = 2;
}

message ModuleData {
    string id = 1;
    string name = 2;

    int32 readCount = 4;
    string boardVersion = 5;
    bool plug = 6;
    int32 atIndex = 7;
    string board = 8;
    string boardAddr = 9;
}

message THLModuleData {
    float humidity = 2;
    float airTemperature = 3;

    int32 timestamp = 9;
}

message SOILModuleData {
   int32 p0 = 1;
   int32 p1 = 2;
   int32 p2 = 3;
   int32 p3 = 4;
   int32 p4 = 5;
   int32 p5 = 6;
   int32 p6 = 7;
   int32 p7 = 8;

   int32 timestamp = 9;
   string valuetype = 10;
}

message SOILProbeConfig {
    int32 low = 1;
    int32 high = 2;
}

message SOILModuleConfig {
    SOILProbeConfig p0 = 1;
    SOILProbeConfig p1 = 2;
    SOILProbeConfig p2 = 3;
    SOILProbeConfig p3 = 4;
    SOILProbeConfig p4 = 5;
    SOILProbeConfig p5 = 6;
    SOILProbeConfig p6 = 7;
    SOILProbeConfig p7 = 8;
}


enum CalibrationStep {
    READY_CALIBRATION = 0;
    LOW_CALIBRATION = 1;
    HIGH_CALIBRATION = 2;
    ERROR_CALIBRATION = 3;
    WAITING_CONFIRMATION_CALIBRATION = 4;
}

enum CalibrationStepStatus {
    INSUFFISANT_DATA_STATUS = 0;
    ENOUGHT_DATA_STATUS = 1;
    ERROR_STATUS = 2;
    AWAITING_STEP_STATUS = 3;
}

enum CalibrationError {
    NONE_ERROR = 0;
    ALREADY_STARTED_ERROR = 1;
    INSTABLE_DATA_ERROR = 2;
    NOT_ENOUGHT_DATA_ERROR = 3;
}

// Message to start the calibration request
message SOILCalibrationStart {}

// Message to configure the current step of the request
message SOILCalibrationStep {
    CalibrationStep requested_step = 1;
}

// Event produce by the process for the cloud to display information to the user
message SOILCalibrationStepEvent {
    CalibrationStep step = 1;
    CalibrationStepStatus status = 2;
    CalibrationError erro = 3;
    string messag = 4;

    repeated SOILModuleData low = 5;
    repeated SOILModuleData high = 6;
}

message WAModuleData {
    int32 PH = 2;
    int32 EC = 3;
    int32 temperature = 4;

    int32 timestamp = 9;
}

enum RelayOutletMode {
    MANUAL = 0;
    ALARM = 1;
    VIRTUAL = 2;
    CYCLE = 3;
}

message CronItem {
    int32 minute = 1;
    int32 hour = 2;
    int32 dayMonth = 3;
    int32 month = 4;
    int32 dayWeek = 5;
}

message CycleConfig {
    int32 waitingTime = 1;
    int32 runningTime = 2;
}

message AlarmConfig {
    CronItem begining = 1;
    CronItem end = 2;
}

message ManualConfig {
    bool state = 1;
    int32 duration = 2;
}

message RelayOutletData {
    bool state = 1;
}

message VirtualRelayConfig {}

message RelayOutletConfig {
    RelayOutletMode mode = 1;
    
    AlarmConfig alarm = 2;
    ManualConfig manual = 3;
    VirtualRelayConfig virtual = 4;
    CycleConfig cycle = 5;

    // optional , if not empty id of the actor
    // that is owning this ressurce
    string actor_owner_id = 6;
    ActorType actor_owner_type = 7;
}

message VirtualRelayPropertyConfig {
    int32 property = 1;
    bool falseState = 2;
    bool trueState = 3;
}

message VirtualRelayItem {
    // action port for the properties
    repeated VirtualRelayPropertyConfig properties = 1;
}
message VirtualRelayPropetyItem {
    string moduleId = 1;
    repeated int32 property  = 2;
}

message VirtualRelayProperty {
    repeated VirtualRelayPropetyItem items = 1;
}

// VirtualOutlet is the definition of the virtual relay
message VirtualRelay {
    string name = 1;
    map<string, VirtualRelayItem> relays = 2;
    // Add many properties to the virtual relay , this is configuration
    // on what property to use on this mode
    // this is optional if no specify will not mind and consider on
    // group with all the asset in relays
    map<string, VirtualRelayProperty> properties = 3;

    // optional , if not empty id of the actor
    // that is owning this ressurce
    string actor_owner_id = 6;
}

// Contains all the virtual outlet
message VirtualRelays {
    repeated VirtualRelay relays = 1;
}

message VirtualRelayData {
    RelayOutletData data = 1;
    int32 timestamp = 2;
}

message VirtualRelayState {
    string id = 1;
    bool state = 2;

    string message = 3;
}

message RelayModuleData {
    RelayOutletData p0 = 1;
    RelayOutletData p1 = 2;
    RelayOutletData p2 = 3;
    RelayOutletData p3 = 4;
    RelayOutletData p4 = 5;
    RelayOutletData p5 = 6;
    RelayOutletData p6 = 7;
    RelayOutletData p7 = 8;

    int32 timestamp = 9;

    Actor actor = 10;
}

message RelayModuleConfig {
    RelayOutletConfig p0 = 1;
    RelayOutletConfig p1 = 2;
    RelayOutletConfig p2 = 3;
    RelayOutletConfig p3 = 4;
    RelayOutletConfig p4 = 5;
    RelayOutletConfig p5 = 6;
    RelayOutletConfig p6 = 7;
    RelayOutletConfig p7 = 8;

    int32 timestamp = 9;

}

message WCModuleData {
    RelayOutletData p0 = 1;
    RelayOutletData p1 = 2;
    RelayOutletData p2 = 3;

    RelayOutletData drain = 4;
    RelayOutletData pump0 = 5;
    RelayOutletData pump1 = 6;
    RelayOutletData pump2 = 7;
    RelayOutletData pump3 = 8;

    int32 timestamp = 9;

    Actor actor = 10;
}

message WCModuleConfig {
    RelayOutletConfig p0 = 1;
    RelayOutletConfig p1 = 2;
    RelayOutletConfig p2 = 3;

    RelayOutletConfig drain = 4;
    RelayOutletConfig pump0 = 5;
    RelayOutletConfig pump1 = 6;
    RelayOutletConfig pump2 = 7;
    RelayOutletConfig pump3 = 8;
}


message PhonePositionData {
    float lat = 1;
    float log = 2;

    float accuracy = 3;

    double altitude = 4;
    float bearing = 5;
    float speed = 7;
}

message PhonePositionConfig {
    
}

message PhoneAccelerationData {
    float gx = 1;
    float gy = 2;
    float gz = 3;
}

message PhoneAccelerationConfig {

}

message PhoneAmbientLightData {
    float si_lux = 1;
}

message PhoneAmbientLightConfig {

}

message PhonePressureData {
    float hpa = 1;
}

message PhonePressureConfig {

}

enum PhoneStreamingStatus {
    STOPPED = 0;
    RUNNING = 1;
    ERROR = 2;
}

enum PhoneStreamingCamera {
    BACK = 0;
    FRONT = 1;
}

enum PhoneStreamingOutput {
    STREAM = 0;
    RECORD = 1;
    STREAM_N_RECORD = 2;
}

message Point {
    int32 x = 1;
    int32 y = 2;
}

message Rect {
    int32 top = 1;
    int32 right = 2;
    int32 bottom = 3;
    int32 left = 4;
}

message CameraFace {
    int32 id = 1;
    int32 score = 2;

    Rect rect = 3;
    Point mouth = 4;
    Point leftEye = 5;
    Point rightEye = 6;
}

message PhoneStreamingData {
    PhoneStreamingStatus status = 1;
    
    float fps = 2;
    float bitrate = 3;

    repeated CameraFace faces = 4;

    string error = 5;
}

message PhoneStreamingConfig {
    bool activated = 1;

    PhoneStreamingOutput output = 2;

    string url = 3;

    PhoneStreamingCamera camera = 4;

    bool light = 5;
    bool audio = 6;
    bool autoFocus = 7;
    bool stabilization = 8;
    bool faceDetection = 9;

    int32 zoom = 10;
}

message ComputerStreamingData {
    PhoneStreamingStatus status = 1;

    float fps = 2;
    float bitrate = 3;

    string error = 4;
}

message ComputerStreamingConfig {
    bool activated = 1;

    string camera = 2;

    PhoneStreamingOutput output = 3;

    string url = 4;

    repeated string arguments = 5;
}

message ComputerStreamingState {
    repeated string cameras = 1;
}

message ComputerStatsConfig {}

message CpuData {
    float user = 1;
    float nice = 2;
    float system = 3;
    float interrupt = 4;
    float idle = 5;
    float temp = 6;
}

message CpuLoadData {
    float one = 1;
    float five = 2;
    float fifteen = 3;
}

message MemoryData {
    float total = 1;
    float free = 2;
    float platform = 3;
}

message PowerData {
    float power = 1;
}

message NetworkData {
    float rx_bytes = 1;
    float tx_bytes = 2;
}

message ComputerStatsData {
    float uptime = 1;

    CpuData cpu = 2;
    CpuLoadData loadavg = 3;
    MemoryData swap = 4;
    MemoryData memory = 5;

    repeated NetworkData netifs = 6;
}


