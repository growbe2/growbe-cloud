{"version":3,"file":"growbe2-ngx-cloud-api.js","sources":["../../../projects/growbe-cloud-api/src/lib/cloud/encoder.ts","../../../projects/growbe-cloud-api/src/lib/cloud/variables.ts","../../../projects/growbe-cloud-api/src/lib/cloud/configuration.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeDashboardController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeMainboardController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeModuleController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeModuleDefController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeModuleGraphController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeSensorValueController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeStreamController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeWarningController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/pingController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/api.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/baseDashboardElement.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/dashboardGraphElement.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/extraFieldWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/graphDataConfig.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/graphModuleRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/groupingDataRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboard.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboardExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboardFilter.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboardFilter1.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboardPartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboardPartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeDashboardWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogs.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogsPartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogsPartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogsWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeMainboard.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeMainboardConfigWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeMainboardExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeMainboardPartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeMainboardPartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeMainboardScopeFilter.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModule.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleDef.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleDefFilter.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleDefFilter1.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleDefPartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleDefWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModulePartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModulePartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeModuleScopeFilter.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeRegisterRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeRegisterResponse.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeSensorValue.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeSensorValueExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeSensorValuePartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeSensorValuePartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeSensorValueScopeFilter.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeStream.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeStreamExcludingIdActiveExpiredAtKey.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeWarning.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeWarningExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeWarningKeyWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeWarningPartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeWarningPartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeWarningScopeFilter.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/loopbackCount.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/moduleDataRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/overrideModuleDefRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/pingResponse.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/userCredentialsWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/userRoleMappingWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api.module.ts","../../../projects/growbe-cloud-api/src/public-api.ts","../../../projects/growbe-cloud-api/src/growbe2-ngx-cloud-api.ts"],"names":[],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAoBiB,wBAuBhB;AAvBD,WAAiB,uBAAuB;AACvC,IACgB,oCAAY,GAAG;AAChC,QAAQ,EAAE,EAAE,GAAmB;AAC/B,QAAQ,EAAE,EAAE,GAAmB;AAC/B,QAAQ,EAAE,EAAE,GAAmB;AAC/B,KAAK,CAAC;AACN,IACiB,iCAAS,GAAG;AAC7B,QAAQ,SAAS,EAAE,WAAwB;AAC3C,QAAQ,OAAO,EAAE,SAAsB;AACvC,KAAK,CAAC;AACN,IACiB,gCAAQ,GAAG;AAC5B,QAAQ,MAAM,EAAE,QAAoB;AACpC,QAAQ,YAAY,EAAE,eAA2B;AACjD,QAAQ,UAAU,EAAE,YAAwB;AAC5C,QAAQ,UAAU,EAAE,aAAyB;AAC7C,QAAQ,SAAS,EAAE,YAAwB;AAC3C,QAAQ,WAAW,EAAE,cAA0B;AAC/C,QAAQ,YAAY,EAAE,eAA2B;AACjD,QAAQ,KAAK,EAAE,OAAmB;AAClC,KAAK,CAAC;AACN,CAAC,EAvBgB,uBAAuB,KAAvB,uBAAuB;AAClC;AChCN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ICMiB,uBAYhB;AAZD,WAAiB,sBAAsB;AACtC,IACgB,gCAAS,GAAG;AAC7B,QAAQ,eAAe,EAAE,kBAA+B;AACxD,QAAQ,eAAe,EAAE,kBAA+B;AACxD,QAAQ,UAAU,EAAE,YAAyB;AAC7C,QAAQ,QAAQ,EAAE,UAAuB;AACzC,QAAQ,eAAe,EAAE,kBAA+B;AACxD,QAAQ,aAAa,EAAE,gBAA6B;AACpD,QAAQ,2BAA2B,EAAE,+BAA4C;AACjF,QAAQ,oBAAoB,EAAE,uBAAoC;AAClE,KAAK,CAAC;AACN,CAAC,EAZgB,sBAAsB,KAAtB,sBAAsB;AACjC;ACniB,kBAShB;AATD,WAAiB,iBAAiB;AACjC,IACgB,+BAAa,GAAG;AACjC,QAAQ,KAAK,EAAE,OAAwB;AACvC,QAAQ,KAAK,EAAE,OAAwB;AACvC,QAAQ,OAAO,EAAE,SAA0B;AAC3C,QAAQ,GAAG,EAAE,KAAsB;AACnC,QAAQ,IAAI,EAAE,MAAuB;AACrC,KAAK,CAAC;AACN,CAAC,EATgB,iBAAiB,KAAjB,iBAAiB;AAC5B;AC5CN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MCQa,SAAS;AACtB,IAOI,YAAqC,YAAuB,EACnC,IAAgB;AAC7C,QAAQ,IAAI,YAAY,EAAE;AAC1B,YAAY,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;AAChG,SAAS;AACT,QAAQ,IAAI,CAAC,IAAI,EAAE;AACnB,YAAY,MAAM,IAAI,KAAK,CAAC,+DAA+D;AAC3F,gBAAY,0DAA0D,CAAC,CAAC;AACxE,SAAS;AACT,KAAK;AACL,IAjBW,OAAO,OAAO,CAAC,oBAAyC;AAAI,QAC/D,OAAO;AACf,YAAY,QAAQ,EAAE,SAAS;AAC/B,YAAY,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,oBAAoB,EAAE,CAAE;AACvF,SAAS,CAAC;AACV,KAAK;AACL;qCAbC,QAAQ,SAAC,kBACR,OAAO,EAAO,EAAE,kBAChB,YAAY,EAAE,EAAE,kBAChB,OAAO,EAAO,EAAE;YAChB,SAAS,EAAE,EAAE,cACd;yFACI;AAAC;AACU,YAOuC,SAAS,uBAA9C,QAAQ,YAAI,QAAQ;AAAO,YA1BpC,UAAU,uBA2BD,QAAQ;AAAM;;;;;;;;;;;;;;;kCAAE;AAAC;AC7BnC;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACsiB","sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default bearerAuth credential\n        if (!this.credentials['bearerAuth']) {\n            this.credentials['bearerAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeDashboard } from '../model/models';\nimport { GrowbeDashboardFilter } from '../model/models';\nimport { GrowbeDashboardFilter1 } from '../model/models';\nimport { GrowbeDashboardWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeDashboardControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/dashboards/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeDashboard\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeDashboard>;\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeDashboard>>;\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeDashboard>>;\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeDashboard>(`${this.configuration.basePath}/dashboards`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeDashboard\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeDashboardControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeDashboardControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeDashboardControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeDashboardWithRelations>>;\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeDashboardWithRelations>>>;\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeDashboardWithRelations>>>;\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeDashboardWithRelations>>(`${this.configuration.basePath}/dashboards`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeDashboardWithRelations>;\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeDashboardWithRelations>>;\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeDashboardWithRelations>>;\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeDashboardWithRelations>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeDashboard\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/dashboards`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeDashboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BaseDashboardElement } from '../model/models';\nimport { DashboardGraphElement } from '../model/models';\nimport { GraphDataConfig } from '../model/models';\nimport { GrowbeLogs } from '../model/models';\nimport { GrowbeMainboard } from '../model/models';\nimport { GrowbeMainboardExcludingId } from '../model/models';\nimport { GrowbeMainboardFilter } from '../model/models';\nimport { GrowbeMainboardFilter1 } from '../model/models';\nimport { GrowbeMainboardPartial } from '../model/models';\nimport { GrowbeMainboardPartialExcludingId } from '../model/models';\nimport { GrowbeMainboardWithRelations } from '../model/models';\nimport { GrowbeModule } from '../model/models';\nimport { GrowbeRegisterRequest } from '../model/models';\nimport { GrowbeRegisterResponse } from '../model/models';\nimport { GrowbeSensorValue } from '../model/models';\nimport { GrowbeWarning } from '../model/models';\nimport { GrowbeWarningPartial } from '../model/models';\nimport { GrowbeWarningPartialExcludingId } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeMainboardControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerBaseDashboardElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BaseDashboardElement>;\n    public growbeMainboardControllerBaseDashboardElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BaseDashboardElement>>;\n    public growbeMainboardControllerBaseDashboardElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BaseDashboardElement>>;\n    public growbeMainboardControllerBaseDashboardElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BaseDashboardElement>(`${this.configuration.basePath}/model/baseDashboardElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbes/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param growbeMainboardExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeMainboard>;\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeMainboard>>;\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeMainboard>>;\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeMainboard>(`${this.configuration.basePath}/growbes`,\n            growbeMainboardExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel_1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel_2.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param growbeWarningPartialExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel_3.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings`,\n            growbeWarningPartialExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDashboardClockStateElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BaseDashboardElement>;\n    public growbeMainboardControllerDashboardClockStateElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardClockStateElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardClockStateElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BaseDashboardElement>(`${this.configuration.basePath}/model/dashboardClockStateElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDashboardGraphElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<DashboardGraphElement>;\n    public growbeMainboardControllerDashboardGraphElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<DashboardGraphElement>>;\n    public growbeMainboardControllerDashboardGraphElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<DashboardGraphElement>>;\n    public growbeMainboardControllerDashboardGraphElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<DashboardGraphElement>(`${this.configuration.basePath}/model/dashboardGraphElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDashboardLastValueElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BaseDashboardElement>;\n    public growbeMainboardControllerDashboardLastValueElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardLastValueElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardLastValueElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BaseDashboardElement>(`${this.configuration.basePath}/model/dashboardLastValueElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel_4.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel_4.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel_5.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel_5.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel_6.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel_6.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeMainboardControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeMainboardWithRelations>>;\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeMainboardWithRelations>>>;\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeMainboardWithRelations>>>;\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeMainboardWithRelations>>(`${this.configuration.basePath}/growbes`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeMainboardWithRelations>;\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeMainboardWithRelations>>;\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeMainboardWithRelations>>;\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeMainboardWithRelations>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeOrganisation.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/organisations/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeOrganisationCount.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/organisations/${encodeURIComponent(String(id))}/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeUser.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/user/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeUserCount.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/user/${encodeURIComponent(String(id))}/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel_7.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel_8.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel_9.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel_10.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel_10.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel_11.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel_11.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel_12.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel_12.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGraphDataConfig(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GraphDataConfig>;\n    public growbeMainboardControllerGraphDataConfig(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GraphDataConfig>>;\n    public growbeMainboardControllerGraphDataConfig(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GraphDataConfig>>;\n    public growbeMainboardControllerGraphDataConfig(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GraphDataConfig>(`${this.configuration.basePath}/model/graphDataConfig`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById_13.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById_13.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById_14.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById_14.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param growbeWarningPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById_15.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById_15.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings/${encodeURIComponent(String(fk))}`,\n            growbeWarningPartial,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param growbeRegisterRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeRegisterResponse>;\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeRegisterResponse>>;\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeRegisterResponse>>;\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeRegisterResponse>(`${this.configuration.basePath}/growbe/register`,\n            growbeRegisterRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param orgId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerRegisterOrganisation.');\n        }\n        if (orgId === null || orgId === undefined) {\n            throw new Error('Required parameter orgId was null or undefined when calling growbeMainboardControllerRegisterOrganisation.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/register/org/${encodeURIComponent(String(orgId))}`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerSetGrowbeConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbe/${encodeURIComponent(String(id))}/config`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerSetGrowbeRTC.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbe/${encodeURIComponent(String(id))}/rtc`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerSetGrowbeSync.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbe/${encodeURIComponent(String(id))}/sync`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param growbeMainboardPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbes`,\n            growbeMainboardPartial,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeMainboard\n     * @param id \n     * @param growbeMainboardPartialExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            growbeMainboardPartialExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeModule } from '../model/models';\nimport { GrowbeModuleFilter } from '../model/models';\nimport { GrowbeModuleFilter1 } from '../model/models';\nimport { GrowbeModuleWithRelations } from '../model/models';\nimport { GrowbeSensorValue } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeModuleControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbeModules/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeModule\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeModule>(`${this.configuration.basePath}/growbeModules`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeModule\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerCreateRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeModule\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerDelRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeModuleControllerDelRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeModule\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeModuleWithRelations>>;\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeModuleWithRelations>>>;\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeModuleWithRelations>>>;\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeModuleWithRelations>>(`${this.configuration.basePath}/growbeModules`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModuleWithRelations>;\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModuleWithRelations>>;\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModuleWithRelations>>;\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModuleWithRelations>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerFindRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerGetRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeModuleControllerGetRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeModule\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerPutRelationModelById.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeModuleControllerPutRelationModelById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeModule\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerSetConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/config`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbeModules`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeModule\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeModuleDef } from '../model/models';\nimport { GrowbeModuleDefFilter } from '../model/models';\nimport { GrowbeModuleDefFilter1 } from '../model/models';\nimport { GrowbeModuleDefPartial } from '../model/models';\nimport { GrowbeModuleDefWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\nimport { OverrideModuleDefRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeModuleDefControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerAddHardwareAlarm.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}/addAlarm`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModuleDef\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbeModuleDefs/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeModuleDef\n     * @param growbeModuleDef \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModuleDef>;\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModuleDef>>;\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModuleDef>>;\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeModuleDef>(`${this.configuration.basePath}/growbeModuleDefs`,\n            growbeModuleDef,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeModuleDef\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleDefControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModuleDef\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeModuleDefWithRelations>>;\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeModuleDefWithRelations>>>;\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeModuleDefWithRelations>>>;\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeModuleDefWithRelations>>(`${this.configuration.basePath}/growbeModuleDefs`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModuleDef\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModuleDefWithRelations>;\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModuleDefWithRelations>>;\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModuleDefWithRelations>>;\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModuleDefWithRelations>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param overrideModuleDefRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModuleDefs/override`,\n            overrideModuleDefRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerRemoveHardwareAlarm.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}/removeAlarm`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeModuleDef\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param growbeModuleDefPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbeModuleDefs`,\n            growbeModuleDefPartial,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeModuleDef\n     * @param id \n     * @param growbeModuleDefPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            growbeModuleDefPartial,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GraphModuleRequest } from '../model/models';\nimport { ModuleDataRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeModuleGraphControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param graphModuleRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbe/graph`,\n            graphModuleRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param moduleDataRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbe/one`,\n            moduleDataRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeSensorValue } from '../model/models';\nimport { GrowbeSensorValueFilter } from '../model/models';\nimport { GrowbeSensorValueFilter1 } from '../model/models';\nimport { GrowbeSensorValueWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeSensorValueControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbeSensorValues/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeSensorValue\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeSensorValue>(`${this.configuration.basePath}/growbeSensorValues`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeSensorValue\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeSensorValueControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeSensorValueControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeSensorValueControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeSensorValueWithRelations>>;\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeSensorValueWithRelations>>>;\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeSensorValueWithRelations>>>;\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeSensorValueWithRelations>>(`${this.configuration.basePath}/growbeSensorValues`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValueWithRelations>;\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValueWithRelations>>;\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValueWithRelations>>;\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValueWithRelations>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeSensorValue\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbeSensorValues`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeSensorValue\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeStreamControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeStreams`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeStream\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeStreamControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeStreamControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeStreamControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeStreamControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeStreamControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeStreams/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeStreamControllerGetLiveStream(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeStreamControllerGetLiveStream(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeStreamControllerGetLiveStream(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeStreamControllerGetLiveStream(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeStreamControllerGetLiveStream.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbeStreams/${encodeURIComponent(String(id))}/live`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeWarning } from '../model/models';\nimport { GrowbeWarningExcludingId } from '../model/models';\nimport { GrowbeWarningFilter } from '../model/models';\nimport { GrowbeWarningFilter1 } from '../model/models';\nimport { GrowbeWarningPartial } from '../model/models';\nimport { GrowbeWarningPartialExcludingId } from '../model/models';\nimport { GrowbeWarningWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeWarningControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeWarning\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/warnings/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeWarning\n     * @param growbeWarningExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeWarning>(`${this.configuration.basePath}/warnings`,\n            growbeWarningExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeWarning\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeWarningControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeWarningControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeWarningControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeWarning\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeWarningWithRelations>>;\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeWarningWithRelations>>>;\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeWarningWithRelations>>>;\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeWarningWithRelations>>(`${this.configuration.basePath}/warnings`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeWarning\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarningWithRelations>;\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarningWithRelations>>;\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarningWithRelations>>;\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeWarningWithRelations>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeWarning\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param growbeWarningPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/warnings`,\n            growbeWarningPartial,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeWarning\n     * @param id \n     * @param growbeWarningPartialExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            growbeWarningPartialExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PingResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PingControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerPing(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerPing(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerPing(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerPing(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PingResponse>(`${this.configuration.basePath}/ping`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './growbeDashboardController.service';\nimport { GrowbeDashboardControllerService } from './growbeDashboardController.service';\nexport * from './growbeMainboardController.service';\nimport { GrowbeMainboardControllerService } from './growbeMainboardController.service';\nexport * from './growbeModuleController.service';\nimport { GrowbeModuleControllerService } from './growbeModuleController.service';\nexport * from './growbeModuleDefController.service';\nimport { GrowbeModuleDefControllerService } from './growbeModuleDefController.service';\nexport * from './growbeModuleGraphController.service';\nimport { GrowbeModuleGraphControllerService } from './growbeModuleGraphController.service';\nexport * from './growbeSensorValueController.service';\nimport { GrowbeSensorValueControllerService } from './growbeSensorValueController.service';\nexport * from './growbeStreamController.service';\nimport { GrowbeStreamControllerService } from './growbeStreamController.service';\nexport * from './growbeWarningController.service';\nimport { GrowbeWarningControllerService } from './growbeWarningController.service';\nexport * from './pingController.service';\nimport { PingControllerService } from './pingController.service';\nexport const APIS = [GrowbeDashboardControllerService, GrowbeMainboardControllerService, GrowbeModuleControllerService, GrowbeModuleDefControllerService, GrowbeModuleGraphControllerService, GrowbeSensorValueControllerService, GrowbeStreamControllerService, GrowbeWarningControllerService, PingControllerService];\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface BaseDashboardElement { \n    name?: string;\n    type?: BaseDashboardElement.TypeEnum;\n}\nexport namespace BaseDashboardElement {\n    export type TypeEnum = 'graph' | 'average' | 'lastread' | 'clock';\n    export const TypeEnum = {\n        Graph: 'graph' as TypeEnum,\n        Average: 'average' as TypeEnum,\n        Lastread: 'lastread' as TypeEnum,\n        Clock: 'clock' as TypeEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GraphDataConfig } from './graphDataConfig';\nimport { ModuleDataRequest } from './moduleDataRequest';\n\n\nexport interface DashboardGraphElement { \n    name?: string;\n    type?: DashboardGraphElement.TypeEnum;\n    graphType?: DashboardGraphElement.GraphTypeEnum;\n    graphConfig?: GraphDataConfig;\n    graphDataConfig?: ModuleDataRequest;\n}\nexport namespace DashboardGraphElement {\n    export type TypeEnum = 'graph' | 'average' | 'lastread' | 'clock';\n    export const TypeEnum = {\n        Graph: 'graph' as TypeEnum,\n        Average: 'average' as TypeEnum,\n        Lastread: 'lastread' as TypeEnum,\n        Clock: 'clock' as TypeEnum\n    };\n    export type GraphTypeEnum = 'line' | 'bar-vertical';\n    export const GraphTypeEnum = {\n        Line: 'line' as GraphTypeEnum,\n        BarVertical: 'bar-vertical' as GraphTypeEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: ExtraFieldWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface ExtraFieldWithRelations { \n    id?: number;\n    type?: string;\n    name?: string;\n    defaultValue?: object;\n    editable?: boolean;\n    required?: boolean;\n    validators?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GraphDataConfig { \n    scheme?: object;\n    schemeType?: string;\n    customColors?: object;\n    animations?: boolean;\n    rangeFillOpacity?: number;\n    legend?: boolean;\n    legendTitle?: string;\n    legendPosition?: string;\n    showLabels?: boolean;\n    xAxis?: boolean;\n    yAxis?: boolean;\n    showYAxisLabel?: boolean;\n    showXAxisLabel?: boolean;\n    xScaleMin?: number;\n    xScaleMax?: number;\n    yScaleMin?: number;\n    yScaleMax?: number;\n    yAxisLabel?: string;\n    xAxisLabel?: string;\n    trimXAxisTicks?: boolean;\n    trimYAxisTicks?: boolean;\n    maxXAxisTickLength?: number;\n    maxYAxisTickLength?: number;\n    rotateXAxisTicks?: boolean;\n    showGridLines?: boolean;\n    roundDomains?: boolean;\n    timeline?: boolean;\n    gradient?: boolean;\n    referenceLines?: Array<object>;\n    showRefLines?: boolean;\n    showRefLabels?: boolean;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GroupingDataRequest } from './groupingDataRequest';\n\n\nexport interface GraphModuleRequest { \n    /**\n     * ID of the growbe to get data\n     */\n    growbeId?: string;\n    /**\n     * Module to get the data from\n     */\n    moduleId?: string;\n    /**\n     * Last X Unit of time , default to Date\n     */\n    lastX?: number;\n    lastXUnit?: GraphModuleRequest.LastXUnitEnum;\n    /**\n     * if specify , get data from interval from this date\n     */\n    from?: string;\n    /**\n     * if specify , get data from interval before this date\n     */\n    to?: string;\n    fields?: Array<string>;\n    /**\n     * if true the data will be fetch , only possible with lastX\n     */\n    liveUpdate?: boolean;\n    grouping?: GroupingDataRequest;\n}\nexport namespace GraphModuleRequest {\n    export type LastXUnitEnum = 'Month' | 'Hours' | 'Minutes' | 'Day' | 'Date';\n    export const LastXUnitEnum = {\n        Month: 'Month' as LastXUnitEnum,\n        Hours: 'Hours' as LastXUnitEnum,\n        Minutes: 'Minutes' as LastXUnitEnum,\n        Day: 'Day' as LastXUnitEnum,\n        Date: 'Date' as LastXUnitEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GroupingDataRequest { \n    baseGroup?: Array<GroupingDataRequest.BaseGroupEnum>;\n    intervalUnit?: GroupingDataRequest.IntervalUnitEnum;\n    intervalValue?: number;\n}\nexport namespace GroupingDataRequest {\n    export type BaseGroupEnum = 'minute' | 'hour' | 'dayOfYear' | 'year';\n    export const BaseGroupEnum = {\n        Minute: 'minute' as BaseGroupEnum,\n        Hour: 'hour' as BaseGroupEnum,\n        DayOfYear: 'dayOfYear' as BaseGroupEnum,\n        Year: 'year' as BaseGroupEnum\n    };\n    export type IntervalUnitEnum = 'minute' | 'hour' | 'dayOfYear' | 'year';\n    export const IntervalUnitEnum = {\n        Minute: 'minute' as IntervalUnitEnum,\n        Hour: 'hour' as IntervalUnitEnum,\n        DayOfYear: 'dayOfYear' as IntervalUnitEnum,\n        Year: 'year' as IntervalUnitEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeDashboard { \n  [key: string]: object | any;\n\n\n    id?: string;\n    userId?: string;\n    name?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<GrowbeDashboard, \\'id\\'>, schemaOptions: { title: \\'\\', partial: undefined, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeDashboardExcludingId { \n  [key: string]: object | any;\n\n\n    userId?: string;\n    name?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeDashboardFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    fields?: any | Set<string>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeDashboardFilter1 { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: any | Set<string>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeDashboard>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeDashboardPartial { \n  [key: string]: object | any;\n\n\n    id?: string;\n    userId?: string;\n    name?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeDashboard>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeDashboardPartialExcludingId { \n  [key: string]: object | any;\n\n\n    userId?: string;\n    name?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: GrowbeDashboardWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface GrowbeDashboardWithRelations { \n  [key: string]: object | any;\n\n\n    id?: string;\n    userId?: string;\n    name?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeLogs { \n  [key: string]: object | any;\n\n\n    id?: string;\n    timestamp?: string;\n    severity?: GrowbeLogs.SeverityEnum;\n    group?: GrowbeLogs.GroupEnum;\n    type?: GrowbeLogs.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogs {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeLogs>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeLogsPartial { \n  [key: string]: object | any;\n\n\n    id?: string;\n    timestamp?: string;\n    severity?: GrowbeLogsPartial.SeverityEnum;\n    group?: GrowbeLogsPartial.GroupEnum;\n    type?: GrowbeLogsPartial.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogsPartial {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeLogs>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeLogsPartialExcludingId { \n  [key: string]: object | any;\n\n\n    timestamp?: string;\n    severity?: GrowbeLogsPartialExcludingId.SeverityEnum;\n    group?: GrowbeLogsPartialExcludingId.GroupEnum;\n    type?: GrowbeLogsPartialExcludingId.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogsPartialExcludingId {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: GrowbeLogsWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface GrowbeLogsWithRelations { \n  [key: string]: object | any;\n\n\n    id?: string;\n    timestamp?: string;\n    severity?: GrowbeLogsWithRelations.SeverityEnum;\n    group?: GrowbeLogsWithRelations.GroupEnum;\n    type?: GrowbeLogsWithRelations.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogsWithRelations {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeMainboard { \n    id?: string;\n    name?: string;\n    state?: string;\n    userId?: string;\n    organisationId?: string;\n    lastUpdateAt?: string;\n    version?: string;\n    cloudVersion?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: GrowbeMainboardConfigWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface GrowbeMainboardConfigWithRelations { \n    id?: number;\n    config?: object;\n    growbeMainboardId?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<GrowbeMainboard, \\'id\\'>, schemaOptions: { title: \\'\\', partial: undefined, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeMainboardExcludingId { \n    name?: string;\n    state?: string;\n    userId?: string;\n    organisationId?: string;\n    lastUpdateAt?: string;\n    version?: string;\n    cloudVersion?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeMainboard>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeMainboardPartial { \n    id?: string;\n    name?: string;\n    state?: string;\n    userId?: string;\n    organisationId?: string;\n    lastUpdateAt?: string;\n    version?: string;\n    cloudVersion?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeMainboard>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeMainboardPartialExcludingId { \n    name?: string;\n    state?: string;\n    userId?: string;\n    organisationId?: string;\n    lastUpdateAt?: string;\n    version?: string;\n    cloudVersion?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeMainboardScopeFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: any | Set<string>;\n    include?: Array<{ [key: string]: object; }>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeModule { \n  [key: string]: object | any;\n\n\n    id?: string;\n    uid?: string;\n    connected?: boolean;\n    readCount?: number;\n    config?: object;\n    mainboardId?: string;\n    moduleName?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeModuleDef { \n    id?: string;\n    displayName?: string | null;\n    name?: string;\n    description?: string;\n    pbModelName?: string;\n    pbModelConfig?: string;\n    properties?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeModuleDefFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    fields?: object | Set<string>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeModuleDefFilter1 { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: object | Set<string>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeModuleDef>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeModuleDefPartial { \n    id?: string;\n    displayName?: string | null;\n    name?: string;\n    description?: string;\n    pbModelName?: string;\n    pbModelConfig?: string;\n    properties?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: GrowbeModuleDefWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface GrowbeModuleDefWithRelations { \n    id?: string;\n    displayName?: string | null;\n    name?: string;\n    description?: string;\n    pbModelName?: string;\n    pbModelConfig?: string;\n    properties?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<GrowbeModule, \\'id\\'>, schemaOptions: { title: \\'\\', partial: undefined, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeModuleExcludingId { \n  [key: string]: object | any;\n\n\n    uid?: string;\n    connected?: boolean;\n    readCount?: number;\n    config?: object;\n    mainboardId?: string;\n    moduleName?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeModule>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeModulePartial { \n  [key: string]: object | any;\n\n\n    id?: string;\n    uid?: string;\n    connected?: boolean;\n    readCount?: number;\n    config?: object;\n    mainboardId?: string;\n    moduleName?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeModule>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeModulePartialExcludingId { \n  [key: string]: object | any;\n\n\n    uid?: string;\n    connected?: boolean;\n    readCount?: number;\n    config?: object;\n    mainboardId?: string;\n    moduleName?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeModuleScopeFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: any | Set<string>;\n    include?: Array<{ [key: string]: object; }>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeRegisterRequest { \n    id?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GrowbeMainboard } from './growbeMainboard';\n\n\nexport interface GrowbeRegisterResponse { \n    state?: GrowbeRegisterResponse.StateEnum;\n    growbe?: GrowbeMainboard;\n}\nexport namespace GrowbeRegisterResponse {\n    export type StateEnum = 'BEATH_UNREGISTER' | 'UNBEATH_REGISTER' | 'UNREGISTER' | 'REGISTER' | 'ALREADY_REGISTER' | 'NOT_ACCESSIBLE' | 'ALREADY_REGISTER_ORGANISATION' | 'REGISTER_ORGANISATION';\n    export const StateEnum = {\n        BeathUnregister: 'BEATH_UNREGISTER' as StateEnum,\n        UnbeathRegister: 'UNBEATH_REGISTER' as StateEnum,\n        Unregister: 'UNREGISTER' as StateEnum,\n        Register: 'REGISTER' as StateEnum,\n        AlreadyRegister: 'ALREADY_REGISTER' as StateEnum,\n        NotAccessible: 'NOT_ACCESSIBLE' as StateEnum,\n        AlreadyRegisterOrganisation: 'ALREADY_REGISTER_ORGANISATION' as StateEnum,\n        RegisterOrganisation: 'REGISTER_ORGANISATION' as StateEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeSensorValue { \n  [key: string]: object | any;\n\n\n    id?: string;\n    /**\n     * type of the module ex: AAB\n     */\n    moduleType?: string;\n    moduleId?: string;\n    growbeMainboardId?: string;\n    /**\n     * starting point of the growbe sensor value document\n     */\n    createdAt?: number;\n    /**\n     * ending point of the growbe sensor value document\n     */\n    endingAt?: number;\n    /**\n     * last value\n     */\n    values?: object;\n    /**\n     * historic of data during this minutes\n     */\n    samples?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<GrowbeSensorValue, \\'id\\'>, schemaOptions: { title: \\'\\', partial: undefined, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeSensorValueExcludingId { \n  [key: string]: object | any;\n\n\n    /**\n     * type of the module ex: AAB\n     */\n    moduleType?: string;\n    moduleId?: string;\n    growbeMainboardId?: string;\n    /**\n     * starting point of the growbe sensor value document\n     */\n    createdAt?: number;\n    /**\n     * ending point of the growbe sensor value document\n     */\n    endingAt?: number;\n    /**\n     * last value\n     */\n    values?: object;\n    /**\n     * historic of data during this minutes\n     */\n    samples?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeSensorValue>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeSensorValuePartial { \n  [key: string]: object | any;\n\n\n    id?: string;\n    /**\n     * type of the module ex: AAB\n     */\n    moduleType?: string;\n    moduleId?: string;\n    growbeMainboardId?: string;\n    /**\n     * starting point of the growbe sensor value document\n     */\n    createdAt?: number;\n    /**\n     * ending point of the growbe sensor value document\n     */\n    endingAt?: number;\n    /**\n     * last value\n     */\n    values?: object;\n    /**\n     * historic of data during this minutes\n     */\n    samples?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeSensorValue>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeSensorValuePartialExcludingId { \n  [key: string]: object | any;\n\n\n    /**\n     * type of the module ex: AAB\n     */\n    moduleType?: string;\n    moduleId?: string;\n    growbeMainboardId?: string;\n    /**\n     * starting point of the growbe sensor value document\n     */\n    createdAt?: number;\n    /**\n     * ending point of the growbe sensor value document\n     */\n    endingAt?: number;\n    /**\n     * last value\n     */\n    values?: object;\n    /**\n     * historic of data during this minutes\n     */\n    samples?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeSensorValueScopeFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: any | Set<string>;\n    include?: Array<{ [key: string]: object; }>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeStream { \n  [key: string]: object | any;\n\n\n    id?: string;\n    growbeMainboardId?: string;\n    streamName?: string;\n    active?: boolean;\n    expiredAt?: number;\n    url?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<GrowbeStream, \\'id\\' | \\'active\\' | \\'expiredAt\\' | \\'key\\'>, schemaOptions: { exclude: [ \\'id\\', \\'active\\', \\'expiredAt\\', \\'key\\' ] })\n */\nexport interface GrowbeStreamExcludingIdActiveExpiredAtKey { \n  [key: string]: object | any;\n\n\n    growbeMainboardId?: string;\n    streamName?: string;\n    url?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeWarning { \n    id?: number;\n    growbeMainboardId?: string;\n    warningKeyId?: string;\n    text?: string;\n    data?: object;\n    createdAt?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<GrowbeWarning, \\'id\\'>, schemaOptions: { title: \\'\\', partial: undefined, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeWarningExcludingId { \n    growbeMainboardId?: string;\n    warningKeyId?: string;\n    text?: string;\n    data?: object;\n    createdAt?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: GrowbeWarningKeyWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface GrowbeWarningKeyWithRelations { \n    key?: string;\n    multi?: object;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeWarning>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeWarningPartial { \n    id?: number;\n    growbeMainboardId?: string;\n    warningKeyId?: string;\n    text?: string;\n    data?: object;\n    createdAt?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeWarning>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeWarningPartialExcludingId { \n    growbeMainboardId?: string;\n    warningKeyId?: string;\n    text?: string;\n    data?: object;\n    createdAt?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeWarningScopeFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: any | Set<string>;\n    include?: Array<{ [key: string]: object; }>;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface LoopbackCount { \n    count?: number;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GroupingDataRequest } from './groupingDataRequest';\n\n\nexport interface ModuleDataRequest { \n    /**\n     * ID of the growbe to get data\n     */\n    growbeId?: string;\n    /**\n     * Module to get the data from\n     */\n    moduleId?: string;\n    /**\n     * Last X Unit of time , default to Date\n     */\n    lastX?: number;\n    lastXUnit?: ModuleDataRequest.LastXUnitEnum;\n    /**\n     * if specify , get data from interval from this date\n     */\n    from?: string;\n    /**\n     * if specify , get data from interval before this date\n     */\n    to?: string;\n    fields?: Array<string>;\n    /**\n     * if true the data will be fetch , only possible with lastX\n     */\n    liveUpdate?: boolean;\n    grouping?: GroupingDataRequest;\n}\nexport namespace ModuleDataRequest {\n    export type LastXUnitEnum = 'Month' | 'Hours' | 'Minutes' | 'Day' | 'Date';\n    export const LastXUnitEnum = {\n        Month: 'Month' as LastXUnitEnum,\n        Hours: 'Hours' as LastXUnitEnum,\n        Minutes: 'Minutes' as LastXUnitEnum,\n        Day: 'Day' as LastXUnitEnum,\n        Date: 'Date' as LastXUnitEnum\n    };\n}\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface OverrideModuleDefRequest { \n    moduleId?: string;\n    moduleName?: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PingResponse { \n    greeting?: string;\n    date?: string;\n    url?: string;\n    headers?: { [key: string]: object; };\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: UserCredentialsWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface UserCredentialsWithRelations { \n    id?: string;\n    password?: string;\n    activationCode?: string;\n    passwordResetCode?: string;\n    validUntil?: number;\n    userId: string;\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: UserRoleMappingWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface UserRoleMappingWithRelations { \n    id?: number;\n    userId?: string;\n    orgUserLinkId?: number;\n    role?: string;\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { GrowbeDashboardControllerService } from './api/growbeDashboardController.service';\nimport { GrowbeMainboardControllerService } from './api/growbeMainboardController.service';\nimport { GrowbeModuleControllerService } from './api/growbeModuleController.service';\nimport { GrowbeModuleDefControllerService } from './api/growbeModuleDefController.service';\nimport { GrowbeModuleGraphControllerService } from './api/growbeModuleGraphController.service';\nimport { GrowbeSensorValueControllerService } from './api/growbeSensorValueController.service';\nimport { GrowbeStreamControllerService } from './api/growbeStreamController.service';\nimport { GrowbeWarningControllerService } from './api/growbeWarningController.service';\nimport { PingControllerService } from './api/pingController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/*\n * Public API Surface of growbe-cloud-api\n */\n\nexport * from './lib';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}