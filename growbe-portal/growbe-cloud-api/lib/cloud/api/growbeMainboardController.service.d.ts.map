{"version":3,"file":"growbeMainboardController.service.d.ts","sources":["growbeMainboardController.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BaseDashboardElement } from '../model/models';\nimport { DashboardGraphElement } from '../model/models';\nimport { GraphDataConfig } from '../model/models';\nimport { GrowbeLogs } from '../model/models';\nimport { GrowbeMainboard } from '../model/models';\nimport { GrowbeMainboardExcludingId } from '../model/models';\nimport { GrowbeMainboardFilter } from '../model/models';\nimport { GrowbeMainboardFilter1 } from '../model/models';\nimport { GrowbeMainboardPartial } from '../model/models';\nimport { GrowbeMainboardPartialExcludingId } from '../model/models';\nimport { GrowbeMainboardWithRelations } from '../model/models';\nimport { GrowbeModule } from '../model/models';\nimport { GrowbeRegisterRequest } from '../model/models';\nimport { GrowbeRegisterResponse } from '../model/models';\nimport { GrowbeSensorValue } from '../model/models';\nimport { GrowbeWarning } from '../model/models';\nimport { GrowbeWarningPartial } from '../model/models';\nimport { GrowbeWarningPartialExcludingId } from '../model/models';\nimport { LoopbackCount } from '../model/models';\nimport { Configuration } from '../configuration';\nexport declare class GrowbeMainboardControllerService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerBaseDashboardElement(observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<BaseDashboardElement>;\n    growbeMainboardControllerBaseDashboardElement(observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<BaseDashboardElement>>;\n    growbeMainboardControllerBaseDashboardElement(observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<BaseDashboardElement>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param where\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<LoopbackCount>;\n    growbeMainboardControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<LoopbackCount>>;\n    growbeMainboardControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<LoopbackCount>>;\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param growbeMainboardExcludingId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeMainboard>;\n    growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeMainboard>>;\n    growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeMainboard>>;\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerCreateRelationModel(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeLogs>;\n    growbeMainboardControllerCreateRelationModel(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeLogs>>;\n    growbeMainboardControllerCreateRelationModel(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeLogs>>;\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeModule>;\n    growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeModule>>;\n    growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeModule>>;\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValue>;\n    growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValue>>;\n    growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValue>>;\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id\n     * @param growbeWarningPartialExcludingId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeWarning>;\n    growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeWarning>>;\n    growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeWarning>>;\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDashboardClockStateElement(observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<BaseDashboardElement>;\n    growbeMainboardControllerDashboardClockStateElement(observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<BaseDashboardElement>>;\n    growbeMainboardControllerDashboardClockStateElement(observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<BaseDashboardElement>>;\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDashboardGraphElement(observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<DashboardGraphElement>;\n    growbeMainboardControllerDashboardGraphElement(observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<DashboardGraphElement>>;\n    growbeMainboardControllerDashboardGraphElement(observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<DashboardGraphElement>>;\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDashboardLastValueElement(observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<BaseDashboardElement>;\n    growbeMainboardControllerDashboardLastValueElement(observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<BaseDashboardElement>>;\n    growbeMainboardControllerDashboardLastValueElement(observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<BaseDashboardElement>>;\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeLogs>;\n    growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeLogs>>;\n    growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeLogs>>;\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeModule>;\n    growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeModule>>;\n    growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeModule>>;\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValue>;\n    growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValue>>;\n    growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValue>>;\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeWarning>;\n    growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeWarning>>;\n    growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeWarning>>;\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeMainboardControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<Array<GrowbeMainboardWithRelations>>;\n    growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<Array<GrowbeMainboardWithRelations>>>;\n    growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<Array<GrowbeMainboardWithRelations>>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeMainboardWithRelations>;\n    growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeMainboardWithRelations>>;\n    growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeMainboardWithRelations>>;\n    /**\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param id\n     * @param where\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param id\n     * @param where\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindGrowbeUserCount(id: string, where?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerFindGrowbeUserCount(id: string, where?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerFindGrowbeUserCount(id: string, where?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindRelationModel(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeLogs>;\n    growbeMainboardControllerFindRelationModel(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeLogs>>;\n    growbeMainboardControllerFindRelationModel(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeLogs>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindRelationModel_7(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeModule>;\n    growbeMainboardControllerFindRelationModel_7(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeModule>>;\n    growbeMainboardControllerFindRelationModel_7(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeModule>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindRelationModel_8(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValue>;\n    growbeMainboardControllerFindRelationModel_8(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValue>>;\n    growbeMainboardControllerFindRelationModel_8(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValue>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerFindRelationModel_9(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeWarning>;\n    growbeMainboardControllerFindRelationModel_9(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeWarning>>;\n    growbeMainboardControllerFindRelationModel_9(id: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeWarning>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeLogs>;\n    growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeLogs>>;\n    growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeLogs>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeModule>;\n    growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeModule>>;\n    growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeModule>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValue>;\n    growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValue>>;\n    growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValue>>;\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeWarning>;\n    growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeWarning>>;\n    growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeWarning>>;\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerGraphDataConfig(observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GraphDataConfig>;\n    growbeMainboardControllerGraphDataConfig(observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GraphDataConfig>>;\n    growbeMainboardControllerGraphDataConfig(observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GraphDataConfig>>;\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeLogs>;\n    growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeLogs>>;\n    growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeLogs>>;\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeModule>;\n    growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeModule>>;\n    growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeModule>>;\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValue>;\n    growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValue>>;\n    growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValue>>;\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id\n     * @param fk\n     * @param growbeWarningPartial\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeWarning>;\n    growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeWarning>>;\n    growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeWarning>>;\n    /**\n     * @param growbeRegisterRequest\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeRegisterResponse>;\n    growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeRegisterResponse>>;\n    growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeRegisterResponse>>;\n    /**\n     * @param id\n     * @param orgId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id\n     * @param body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param id\n     * @param body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param id\n     * @param body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param id\n     * @param body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<any>;\n    growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: undefined;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * PATCH success count\n     * @param where\n     * @param growbeMainboardPartial\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<LoopbackCount>;\n    growbeMainboardControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<LoopbackCount>>;\n    growbeMainboardControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<LoopbackCount>>;\n    /**\n     * Update a instance of GrowbeMainboard\n     * @param id\n     * @param growbeMainboardPartialExcludingId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n}\n"]}