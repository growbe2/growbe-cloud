{"version":3,"file":"growbeDashboardController.service.d.ts","sources":["growbeDashboardController.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { GrowbeDashboard } from '../model/models';\nimport { GrowbeDashboardFilter } from '../model/models';\nimport { GrowbeDashboardFilter1 } from '../model/models';\nimport { GrowbeDashboardWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\nimport { Configuration } from '../configuration';\nexport declare class GrowbeDashboardControllerService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param where\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<LoopbackCount>;\n    growbeDashboardControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<LoopbackCount>>;\n    growbeDashboardControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<LoopbackCount>>;\n    /**\n     * Create a new instance of GrowbeDashboard\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerCreate(requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeDashboard>;\n    growbeDashboardControllerCreate(requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeDashboard>>;\n    growbeDashboardControllerCreate(requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeDashboard>>;\n    /**\n     * Delete a instance of GrowbeDashboard\n     * @param id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeDashboardControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeDashboardControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<Array<GrowbeDashboardWithRelations>>;\n    growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<Array<GrowbeDashboardWithRelations>>>;\n    growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<Array<GrowbeDashboardWithRelations>>>;\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeDashboardWithRelations>;\n    growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeDashboardWithRelations>>;\n    growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeDashboardWithRelations>>;\n    /**\n     * Replace a instance of GrowbeDashboard\n     * @param id\n     * @param body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * PATCH success count\n     * @param where\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<LoopbackCount>;\n    growbeDashboardControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<LoopbackCount>>;\n    growbeDashboardControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<LoopbackCount>>;\n    /**\n     * Update a instance of GrowbeDashboard\n     * @param id\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeDashboardControllerUpdateById(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeDashboardControllerUpdateById(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeDashboardControllerUpdateById(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n}\n"]}