{"version":3,"file":"growbeSensorValueController.service.d.ts","sources":["growbeSensorValueController.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { GrowbeSensorValue } from '../model/models';\nimport { GrowbeSensorValueFilter } from '../model/models';\nimport { GrowbeSensorValueFilter1 } from '../model/models';\nimport { GrowbeSensorValueWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\nimport { Configuration } from '../configuration';\nexport declare class GrowbeSensorValueControllerService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param where\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<LoopbackCount>;\n    growbeSensorValueControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<LoopbackCount>>;\n    growbeSensorValueControllerCount(where?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<LoopbackCount>>;\n    /**\n     * Create a new instance of GrowbeSensorValue\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerCreate(requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValue>;\n    growbeSensorValueControllerCreate(requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValue>>;\n    growbeSensorValueControllerCreate(requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValue>>;\n    /**\n     * Delete a instance of GrowbeSensorValue\n     * @param id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeSensorValueControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeSensorValueControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<Array<GrowbeSensorValueWithRelations>>;\n    growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<Array<GrowbeSensorValueWithRelations>>>;\n    growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<Array<GrowbeSensorValueWithRelations>>>;\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param id\n     * @param filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<GrowbeSensorValueWithRelations>;\n    growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<GrowbeSensorValueWithRelations>>;\n    growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<GrowbeSensorValueWithRelations>>;\n    /**\n     * Replace a instance of GrowbeSensorValue\n     * @param id\n     * @param body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * PATCH success count\n     * @param where\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<LoopbackCount>;\n    growbeSensorValueControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<LoopbackCount>>;\n    growbeSensorValueControllerUpdateAll(where?: {\n        [key: string]: object;\n    }, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<LoopbackCount>>;\n    /**\n     * Update a instance of GrowbeSensorValue\n     * @param id\n     * @param requestBody\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    growbeSensorValueControllerUpdateById(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    growbeSensorValueControllerUpdateById(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    growbeSensorValueControllerUpdateById(id: string, requestBody?: {\n        [key: string]: object;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n}\n"]}