/**
 * growbe-cloud
 * Cloud server for Growbe
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: wquintal@berlingoqc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GrowbeModuleDef } from '../model/models';
import { GrowbeModuleDefFilter } from '../model/models';
import { GrowbeModuleDefFilter1 } from '../model/models';
import { GrowbeModuleDefPartial } from '../model/models';
import { GrowbeModuleDefWithRelations } from '../model/models';
import { LoopbackCount } from '../model/models';
import { OverrideModuleDefRequest } from '../model/models';
import { Configuration } from '../configuration';
export declare class GrowbeModuleDefControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Get a filter list of GrowbeModuleDef
     * @param where
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerCount(where?: {
        [key: string]: object;
    }, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LoopbackCount>;
    growbeModuleDefControllerCount(where?: {
        [key: string]: object;
    }, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LoopbackCount>>;
    growbeModuleDefControllerCount(where?: {
        [key: string]: object;
    }, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LoopbackCount>>;
    /**
     * Create a new instance of GrowbeModuleDef
     * @param growbeModuleDef
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GrowbeModuleDef>;
    growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GrowbeModuleDef>>;
    growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GrowbeModuleDef>>;
    /**
     * Delete a instance of GrowbeModuleDef
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    growbeModuleDefControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    growbeModuleDefControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    /**
     * Get a filter list of GrowbeModuleDef
     * @param filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<GrowbeModuleDefWithRelations>>;
    growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<GrowbeModuleDefWithRelations>>>;
    growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<GrowbeModuleDefWithRelations>>>;
    /**
     * Get a filter list of GrowbeModuleDef
     * @param id
     * @param filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GrowbeModuleDefWithRelations>;
    growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GrowbeModuleDefWithRelations>>;
    growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GrowbeModuleDefWithRelations>>;
    /**
     * @param overrideModuleDefRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Replace a instance of GrowbeModuleDef
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    /**
     * PATCH success count
     * @param where
     * @param growbeModuleDefPartial
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerUpdateAll(where?: {
        [key: string]: object;
    }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LoopbackCount>;
    growbeModuleDefControllerUpdateAll(where?: {
        [key: string]: object;
    }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LoopbackCount>>;
    growbeModuleDefControllerUpdateAll(where?: {
        [key: string]: object;
    }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LoopbackCount>>;
    /**
     * Update a instance of GrowbeModuleDef
     * @param id
     * @param growbeModuleDefPartial
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
}
