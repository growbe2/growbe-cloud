{"version":3,"sources":["../../../projects/growbe-cloud-api/src/lib/cloud/encoder.ts","../../../projects/growbe-cloud-api/src/lib/cloud/variables.ts","../../../projects/growbe-cloud-api/src/lib/cloud/configuration.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeDashboardController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeMainboardController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeModuleController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeModuleDefController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeModuleGraphController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeSensorValueController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeStreamController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/growbeWarningController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/pingController.service.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/dashboardGraphElement.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/groupingDataRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogs.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogsPartial.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogsPartialExcludingId.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeLogsWithRelations.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api/api.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/baseDashboardElement.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/graphModuleRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/growbeRegisterResponse.ts","../../../projects/growbe-cloud-api/src/lib/cloud/model/moduleDataRequest.ts","../../../projects/growbe-cloud-api/src/lib/cloud/api.module.ts"],"names":["CustomHttpParameterCodec","prototype","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","BASE_PATH","InjectionToken","Configuration","configurationParameters","_this","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","GrowbeDashboardControllerService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","Error","append","toISOString","substr","Object","keys","growbeDashboardControllerCount","where","observe","reportProgress","options","queryParameters","HttpParams","credential","headers","set","httpHeaderAcceptSelected","httpHeaderAccept","responseType","startsWith","get","params","growbeDashboardControllerCreate","requestBody","httpContentTypeSelected","post","growbeDashboardControllerDeleteById","id","delete","String","growbeDashboardControllerFind","filter","growbeDashboardControllerFindById","growbeDashboardControllerReplaceById","body","put","growbeDashboardControllerUpdateAll","patch","growbeDashboardControllerUpdateById","Injectable","args","providedIn","HttpClient","Optional","Inject","decorators","GrowbeMainboardControllerService","growbeMainboardControllerBaseDashboardElement","growbeMainboardControllerCount","growbeMainboardControllerCreate","growbeMainboardExcludingId","growbeMainboardControllerCreateRelationModel","growbeMainboardControllerCreateRelationModel_1","growbeMainboardControllerCreateRelationModel_2","growbeMainboardControllerCreateRelationModel_3","growbeWarningPartialExcludingId","growbeMainboardControllerDashboardClockStateElement","growbeMainboardControllerDashboardGraphElement","growbeMainboardControllerDashboardLastValueElement","growbeMainboardControllerDelRelationModel","fk","growbeMainboardControllerDelRelationModel_4","growbeMainboardControllerDelRelationModel_5","growbeMainboardControllerDelRelationModel_6","growbeMainboardControllerDeleteById","growbeMainboardControllerFind","growbeMainboardControllerFindById","growbeMainboardControllerFindGrowbeOrganisation","growbeMainboardControllerFindGrowbeOrganisationCount","growbeMainboardControllerFindGrowbeUser","growbeMainboardControllerFindGrowbeUserCount","growbeMainboardControllerFindRelationModel","growbeMainboardControllerFindRelationModel_7","growbeMainboardControllerFindRelationModel_8","growbeMainboardControllerFindRelationModel_9","growbeMainboardControllerGetRelationModel","growbeMainboardControllerGetRelationModel_10","growbeMainboardControllerGetRelationModel_11","growbeMainboardControllerGetRelationModel_12","growbeMainboardControllerGraphDataConfig","growbeMainboardControllerPutRelationModelById","growbeMainboardControllerPutRelationModelById_13","growbeMainboardControllerPutRelationModelById_14","growbeMainboardControllerPutRelationModelById_15","growbeWarningPartial","growbeMainboardControllerRegisterGrowbe","growbeRegisterRequest","growbeMainboardControllerRegisterOrganisation","orgId","growbeMainboardControllerReplaceById","growbeMainboardControllerSetGrowbeConfig","growbeMainboardControllerSetGrowbeRTC","growbeMainboardControllerSetGrowbeSync","growbeMainboardControllerUpdateAll","growbeMainboardPartial","growbeMainboardControllerUpdateById","growbeMainboardPartialExcludingId","GrowbeModuleControllerService","growbeModuleControllerCount","growbeModuleControllerCreate","growbeModuleControllerCreateRelationModel","growbeModuleControllerDelRelationModel","growbeModuleControllerDeleteById","growbeModuleControllerFind","growbeModuleControllerFindById","growbeModuleControllerFindRelationModel","growbeModuleControllerGetRelationModel","growbeModuleControllerPutRelationModelById","growbeModuleControllerReplaceById","growbeModuleControllerSetConfig","growbeModuleControllerUpdateAll","growbeModuleControllerUpdateById","GrowbeModuleDefControllerService","growbeModuleDefControllerAddHardwareAlarm","growbeModuleDefControllerCount","growbeModuleDefControllerCreate","growbeModuleDef","growbeModuleDefControllerDeleteById","growbeModuleDefControllerFind","growbeModuleDefControllerFindById","growbeModuleDefControllerOverrideModuleDef","overrideModuleDefRequest","growbeModuleDefControllerRemoveHardwareAlarm","growbeModuleDefControllerReplaceById","growbeModuleDefControllerUpdateAll","growbeModuleDefPartial","growbeModuleDefControllerUpdateById","GrowbeModuleGraphControllerService","growbeModuleGraphControllerGetGraph","graphModuleRequest","growbeModuleGraphControllerGetLastValue","moduleDataRequest","GrowbeSensorValueControllerService","growbeSensorValueControllerCount","growbeSensorValueControllerCreate","growbeSensorValueControllerDeleteById","growbeSensorValueControllerFind","growbeSensorValueControllerFindById","growbeSensorValueControllerReplaceById","growbeSensorValueControllerUpdateAll","growbeSensorValueControllerUpdateById","GrowbeStreamControllerService","growbeStreamControllerCreateStream","growbeStreamControllerDeleteById","growbeStreamControllerGetLiveStream","GrowbeWarningControllerService","growbeWarningControllerCount","growbeWarningControllerCreate","growbeWarningExcludingId","growbeWarningControllerDeleteById","growbeWarningControllerFind","growbeWarningControllerFindById","growbeWarningControllerReplaceById","growbeWarningControllerUpdateAll","growbeWarningControllerUpdateById","PingControllerService","pingControllerPing","DashboardGraphElement","GroupingDataRequest","GrowbeLogs","GrowbeLogsPartial","GrowbeLogsPartialExcludingId","GrowbeLogsWithRelations","APIS","BaseDashboardElement","TypeEnum","Graph","Average","Lastread","Clock","GraphTypeEnum","Line","BarVertical","GraphModuleRequest","LastXUnitEnum","Month","Hours","Minutes","Day","BaseGroupEnum","Minute","Hour","DayOfYear","Year","IntervalUnitEnum","SeverityEnum","_0","_1","_2","GroupEnum","Mainboard","Modules","Module","ModuleConfig","Connection","NewWarning","UpdateRtc","SyncRequest","GrowbeConfig","Alarm","GrowbeRegisterResponse","StateEnum","BeathUnregister","UnbeathRegister","Unregister","Register","AlreadyRegister","NotAccessible","AlreadyRegisterOrganisation","RegisterOrganisation","ModuleDataRequest","ApiModule","parentModule","http","forRoot","configurationFactory","ngModule","providers","provide","useFactory","NgModule","imports","declarations","exports","SkipSelf","csv","tsv","ssv","pipes"],"mappings":"kbAMA,IAAAA,EAAA,WAAA,SAAAA,YACIA,EAAAC,UAAAC,UAAA,SAAUC,GACN,OAAOC,mBAAmBD,IAE9BH,EAAAC,UAAAI,YAAA,SAAYC,GACR,OAAOF,mBAAmBE,IAE9BN,EAAAC,UAAAM,UAAA,SAAUJ,GACN,OAAOK,mBAAmBL,IAE9BH,EAAAC,UAAAQ,YAAA,SAAYH,GACR,OAAOE,mBAAmBF,MAXlC,GCJaI,EAAY,IAAIC,EAAAA,eAAuB,yBC2ChD,SAAAC,EAAYC,GAAZ,IAAAC,EAAAC,UAAY,IAAAF,IAAAA,EAAA,IACRE,KAAKC,QAAUH,EAAwBG,QACvCD,KAAKE,SAAWJ,EAAwBI,SACxCF,KAAKG,SAAWL,EAAwBK,SACxCH,KAAKI,YAAcN,EAAwBM,YAC3CJ,KAAKK,SAAWP,EAAwBO,SACxCL,KAAKM,gBAAkBR,EAAwBQ,gBAC/CN,KAAKO,QAAUT,EAAwBS,QACnCT,EAAwBU,YACxBR,KAAKQ,YAAcV,EAAwBU,YAG3CR,KAAKQ,YAAc,GAIlBR,KAAKQ,YAAwB,aAC9BR,KAAKQ,YAAwB,WAAI,WAC7B,MAAmC,mBAArBT,EAAKK,YACbL,EAAKK,cACLL,EAAKK,qBAYhBP,EAAAX,UAAAuB,wBAAA,SAAyBC,GAAzB,IAAAX,EAAAC,KACH,GAA4B,IAAxBU,EAAaC,OAAjB,CAIA,IAAMC,EAAOF,EAAaG,MAAK,SAACC,GAAc,OAAAf,EAAKgB,WAAWD,MAC9D,YAAaE,IAATJ,EACOF,EAAa,GAEjBE,IAUJf,EAAAX,UAAA+B,mBAAA,SAAmBC,GAAnB,IAAAnB,EAAAC,KACH,GAAuB,IAAnBkB,EAAQP,OAAZ,CAIA,IAAMC,EAAOM,EAAQL,MAAK,SAACC,GAAc,OAAAf,EAAKgB,WAAWD,MACzD,YAAaE,IAATJ,EACOM,EAAQ,GAEZN,IAaJf,EAAAX,UAAA6B,WAAA,SAAWI,GACd,IAAMC,EAAmB,IAAIC,OAAO,8DAAiE,KACrG,OAAgB,OAATF,IAAkBC,EAASE,KAAKH,IAAgC,gCAAvBA,EAAKI,gBAGlD1B,EAAAX,UAAAsC,iBAAA,SAAiBC,GACpB,IAAMC,EAAQ1B,KAAKQ,YAAYiB,GAC/B,MAAwB,mBAAVC,EACRA,IACAA,qBCvFV,SAAAC,EAAsBC,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7C0C,EAAAzC,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9DE,EAAAzC,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAYJN,EAAAzC,UAAA4D,+BAAA,SAA+BC,EAAoCC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,oBACpE,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBtB,EAAAzC,UAAA4E,gCAAA,SAAgCC,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEpG,IAEII,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAyBjE,KAAK6B,cAAcxB,SAAQ,cACvE0D,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBtB,EAAAzC,UAAAgF,oCAAA,SAAoCC,EAAYnB,EAAuBC,EAAiCC,GAC3G,QADmD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,eAAehB,mBAAmBgF,OAAOF,IACtG,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBtB,EAAAzC,UAAAoF,8BAAA,SAA8BC,EAAiCvB,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEzF,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA4C5D,KAAK6B,cAAcxB,SAAQ,cAC1F,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBtB,EAAAzC,UAAAsF,kCAAA,SAAkCL,EAAYI,EAAgCvB,EAAuBC,EAAiCC,GACzI,QADiF,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpGkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,+FAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAqC5D,KAAK6B,cAAcxB,SAAQ,eAAehB,mBAAmBgF,OAAOF,IAC5H,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBtB,EAAAzC,UAAAuF,qCAAA,SAAqCN,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC3H,QADmE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,kGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAY3E,KAAK6B,cAAcxB,SAAQ,eAAehB,mBAAmBgF,OAAOF,IACnGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBtB,EAAAzC,UAAA0F,mCAAA,SAAmC7B,EAAoCgB,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE3I,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAwB7E,KAAK6B,cAAcxB,SAAQ,cACtE0D,EACA,CACIF,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBtB,EAAAzC,UAAA4F,oCAAA,SAAoCX,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GACrJ,QAD6F,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAChHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,eAAehB,mBAAmBgF,OAAOF,IACrGJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLAnhB/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAjBLC,EAAAA,2CA0B0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCc/F,SAAAG,EAAsB1D,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CqG,EAAApG,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9D6D,EAAApG,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAUJqD,EAAApG,UAAAqG,8CAAA,SAA8CvC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAExE,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA6B5D,KAAK6B,cAAcxB,SAAQ,8BAC3E,CACIqD,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAsG,+BAAA,SAA+BzC,EAAoCC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,iBACpE,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAuG,gCAAA,SAAgCC,EAAyD1C,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEnH,IAEII,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAyBjE,KAAK6B,cAAcxB,SAAQ,WACvEqF,EACA,CACIhC,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAyG,6CAAA,SAA6CxB,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GAC9J,QADsG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACzHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAoBjE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,cAC5GJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA0G,+CAAA,SAA+CzB,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GAChK,QADwG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC3HkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,4GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAsBjE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,iBAC9GJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA2G,+CAAA,SAA+C1B,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GAChK,QADwG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC3HkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,4GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAA2BjE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,sBACnHJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA4G,+CAAA,SAA+C3B,EAAY4B,EAAmE/C,EAAuBC,EAAiCC,GACzL,QADiI,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpJkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,4GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAuBjE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,kBAC/G4B,EACA,CACIrC,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAYrBqC,EAAApG,UAAA8G,oDAAA,SAAoDhD,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE9E,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA6B5D,KAAK6B,cAAcxB,SAAQ,oCAC3E,CACIqD,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAYrBqC,EAAApG,UAAA+G,+CAAA,SAA+CjD,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEzE,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA8B5D,KAAK6B,cAAcxB,SAAQ,+BAC5E,CACIqD,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAYrBqC,EAAApG,UAAAgH,mDAAA,SAAmDlD,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7E,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA6B5D,KAAK6B,cAAcxB,SAAQ,mCAC3E,CACIqD,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAiH,0CAAA,SAA0ChC,EAAYiC,EAAYpD,EAAuBC,EAAiCC,GAC7H,QADqE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACxFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,uGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,uGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAsBpE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,eAAe9E,mBAAmBgF,OAAO+B,IACvJ,CACI1C,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAmH,4CAAA,SAA4ClC,EAAYiC,EAAYpD,EAAuBC,EAAiCC,GAC/H,QADuE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC1FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,yGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,yGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAwBpE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,kBAAkB9E,mBAAmBgF,OAAO+B,IAC5J,CACI1C,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAoH,4CAAA,SAA4CnC,EAAYiC,EAAYpD,EAAuBC,EAAiCC,GAC/H,QADuE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC1FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,yGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,yGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAA6BpE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,uBAAuB9E,mBAAmBgF,OAAO+B,IACtK,CACI1C,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAqH,4CAAA,SAA4CpC,EAAYiC,EAAYpD,EAAuBC,EAAiCC,GAC/H,QADuE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC1FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,yGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,yGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAyBpE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,mBAAmB9E,mBAAmBgF,OAAO+B,IAC9J,CACI1C,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAsH,oCAAA,SAAoCrC,EAAYnB,EAAuBC,EAAiCC,GAC3G,QADmD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IACnG,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAuH,8BAAA,SAA8BlC,EAAgCvB,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAExF,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA4C5D,KAAK6B,cAAcxB,SAAQ,WAC1F,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAwH,kCAAA,SAAkCvC,EAAYI,EAAiCvB,EAAuBC,EAAiCC,GAC1I,QADkF,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACrGkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,+FAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAqC5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IACzH,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAyH,gDAAA,SAAgDxC,EAAYI,EAAgCvB,EAAuBC,EAAiCC,GACvJ,QAD+F,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAClHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,6GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAY5D,KAAK6B,cAAcxB,SAAQ,0BAA0BhB,mBAAmBgF,OAAOF,IAC9G,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAA0H,qDAAA,SAAqDzC,EAAYpB,EAAoCC,EAAuBC,EAAiCC,GAChK,QADwG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC3HkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,kHAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAAIO,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAY5D,KAAK6B,cAAcxB,SAAQ,0BAA0BhB,mBAAmBgF,OAAOF,IAAI,SAClH,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAA2H,wCAAA,SAAwC1C,EAAYI,EAAgCvB,EAAuBC,EAAiCC,GAC/I,QADuF,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC1GkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,qGAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAY5D,KAAK6B,cAAcxB,SAAQ,iBAAiBhB,mBAAmBgF,OAAOF,IACrG,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAA4H,6CAAA,SAA6C3C,EAAYpB,EAAoCC,EAAuBC,EAAiCC,GACxJ,QADgG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACnHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAAIO,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAY5D,KAAK6B,cAAcxB,SAAQ,iBAAiBhB,mBAAmBgF,OAAOF,IAAI,SACzG,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA6H,2CAAA,SAA2C5C,EAAYI,EAAqCvB,EAAuBC,EAAiCC,GACvJ,QAD+F,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAClHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,wGAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAmB5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,cAC3G,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA8H,6CAAA,SAA6C7C,EAAYI,EAAqCvB,EAAuBC,EAAiCC,GACzJ,QADiG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAqB5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,iBAC7G,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA+H,6CAAA,SAA6C9C,EAAYI,EAAqCvB,EAAuBC,EAAiCC,GACzJ,QADiG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA0B5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,sBAClH,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAgI,6CAAA,SAA6C/C,EAAYI,EAAqCvB,EAAuBC,EAAiCC,GACzJ,QADiG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,kBAC9G,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAiI,0CAAA,SAA0ChD,EAAYiC,EAAY7B,EAAqCvB,EAAuBC,EAAiCC,GAClK,QAD0G,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC7HkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,uGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,uGAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAmB5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,eAAe9E,mBAAmBgF,OAAO+B,IACpJ,CACIvC,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAkI,6CAAA,SAA6CjD,EAAYiC,EAAY7B,EAAqCvB,EAAuBC,EAAiCC,GACrK,QAD6G,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAChIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAqB5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,kBAAkB9E,mBAAmBgF,OAAO+B,IACzJ,CACIvC,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAmI,6CAAA,SAA6ClD,EAAYiC,EAAY7B,EAAqCvB,EAAuBC,EAAiCC,GACrK,QAD6G,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAChIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA0B5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,uBAAuB9E,mBAAmBgF,OAAO+B,IACnK,CACIvC,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAoI,6CAAA,SAA6CnD,EAAYiC,EAAY7B,EAAqCvB,EAAuBC,EAAiCC,GACrK,QAD6G,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAChIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,0GAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,mBAAmB9E,mBAAmBgF,OAAO+B,IAC3J,CACIvC,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAYrBqC,EAAApG,UAAAqI,yCAAA,SAAyCvE,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEnE,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAwB5D,KAAK6B,cAAcxB,SAAQ,yBACtE,CACIqD,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAsI,8CAAA,SAA8CrD,EAAYiC,EAAYrC,EAA0Cf,EAAuBC,EAAiCC,GAC3K,QADmH,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,2GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,2GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAmB3E,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,eAAe9E,mBAAmBgF,OAAO+B,IACpJrC,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAuI,iDAAA,SAAiDtD,EAAYiC,EAAYrC,EAA0Cf,EAAuBC,EAAiCC,GAC9K,QADsH,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACzIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,8GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,8GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAqB3E,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,kBAAkB9E,mBAAmBgF,OAAO+B,IACzJrC,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAwI,iDAAA,SAAiDvD,EAAYiC,EAAYrC,EAA0Cf,EAAuBC,EAAiCC,GAC9K,QADsH,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACzIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,8GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,8GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAA0B3E,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,uBAAuB9E,mBAAmBgF,OAAO+B,IACnKrC,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBqC,EAAApG,UAAAyI,iDAAA,SAAiDxD,EAAYiC,EAAYwB,EAA6C5E,EAAuBC,EAAiCC,GACjL,QADyH,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC5IkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,8GAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,8GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAsB3E,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,mBAAmB9E,mBAAmBgF,OAAO+B,IAC3JwB,EACA,CACIlE,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAarBqC,EAAApG,UAAA2I,wCAAA,SAAwCC,EAA+C9E,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEjH,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAgCjE,KAAK6B,cAAcxB,SAAQ,mBAC9EyH,EACA,CACIpE,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAA6I,8CAAA,SAA8C5D,EAAY6D,EAAehF,EAAuBC,EAAiCC,GACpI,QAD4E,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC/FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,2GAEpB,GAAIwF,MAAAA,EACA,MAAM,IAAIxF,MAAM,8GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAAI,iBAAiB9E,mBAAmBgF,OAAO2D,IAChJ,KACA,CACItE,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAA+I,qCAAA,SAAqC9D,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC3H,QADmE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,kGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAY3E,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAChGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAgJ,yCAAA,SAAyC/D,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC/H,QADuE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC1FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,sGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,WAAWhB,mBAAmBgF,OAAOF,IAAI,UACrGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAiJ,sCAAA,SAAsChE,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC5H,QADoE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACvFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,mGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,WAAWhB,mBAAmBgF,OAAOF,IAAI,OACrGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBqC,EAAApG,UAAAkJ,uCAAA,SAAuCjE,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC7H,QADqE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACxFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,oGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,WAAWhB,mBAAmBgF,OAAOF,IAAI,QACrGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAmJ,mCAAA,SAAmCtF,EAAoCuF,EAAiDtF,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAElJ,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAwB7E,KAAK6B,cAAcxB,SAAQ,WACtEiI,EACA,CACIzE,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBqC,EAAApG,UAAAqJ,oCAAA,SAAoCpE,EAAYqE,EAAuExF,EAAuBC,EAAiCC,GAClL,QAD0H,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC7IkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,YAAYhB,mBAAmBgF,OAAOF,IAClGqE,EACA,CACI9E,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLAxvE/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDA/BLC,EAAAA,2CAwC0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCb/F,SAAAsD,EAAsB7G,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CwJ,EAAAvJ,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9DgH,EAAAvJ,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAYJwG,EAAAvJ,UAAAwJ,4BAAA,SAA4B3F,EAAoCC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE1F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,uBACpE,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwF,EAAAvJ,UAAAyJ,6BAAA,SAA6B5E,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEjG,IAEII,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAsBjE,KAAK6B,cAAcxB,SAAQ,iBACpE0D,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAA0J,0CAAA,SAA0CzE,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GAC3J,QADmG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,uGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAA2BjE,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,sBACzHJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAA2J,uCAAA,SAAuC1E,EAAYiC,EAAYpD,EAAuBC,EAAiCC,GAC1H,QADkE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACrFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,oGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,oGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAA6BpE,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,uBAAuB9E,mBAAmBgF,OAAO+B,IAC5K,CACI1C,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwF,EAAAvJ,UAAA4J,iCAAA,SAAiC3E,EAAYnB,EAAuBC,EAAiCC,GACxG,QADgD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACnEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,8FAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IACzG,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwF,EAAAvJ,UAAA6J,2BAAA,SAA2BxE,EAA8BvB,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEnF,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAyC5D,KAAK6B,cAAcxB,SAAQ,iBACvF,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAA8J,+BAAA,SAA+B7E,EAAYI,EAA6BvB,EAAuBC,EAAiCC,GACnI,QAD2E,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC9FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,4FAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAkC5D,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAC5H,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAA+J,wCAAA,SAAwC9E,EAAYI,EAAqCvB,EAAuBC,EAAiCC,GACpJ,QAD4F,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC/GkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,qGAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA0B5D,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,sBACxH,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBwF,EAAAvJ,UAAAgK,uCAAA,SAAuC/E,EAAYiC,EAAY7B,EAAqCvB,EAAuBC,EAAiCC,GAC/J,QADuG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC1HkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,oGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,oGAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAAIjB,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA0B5D,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,uBAAuB9E,mBAAmBgF,OAAO+B,IACzK,CACIvC,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAgBrBwF,EAAAvJ,UAAAiK,2CAAA,SAA2ChF,EAAYiC,EAAYrC,EAA0Cf,EAAuBC,EAAiCC,GACxK,QADgH,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACnIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,wGAEpB,GAAI4D,MAAAA,EACA,MAAM,IAAI5D,MAAM,wGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAA0B3E,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,uBAAuB9E,mBAAmBgF,OAAO+B,IACzKrC,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAAkK,kCAAA,SAAkCjF,EAAYO,EAAe1B,EAAuBC,EAAiCC,GACxH,QADgE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACnFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,+FAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAY3E,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IACtGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwF,EAAAvJ,UAAAmK,gCAAA,SAAgClF,EAAYO,EAAe1B,EAAuBC,EAAiCC,GACtH,QAD8D,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACjFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,6FAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,UAC3GO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAAoK,gCAAA,SAAgCvG,EAAoCgB,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAExI,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAwB7E,KAAK6B,cAAcxB,SAAQ,iBACtE0D,EACA,CACIF,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwF,EAAAvJ,UAAAqK,iCAAA,SAAiCpF,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GAClJ,QAD0F,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC7GkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,8FAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IACxGJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLA51B/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAlBLC,EAAAA,2CA2B0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCC/F,SAAAqE,EAAsB5H,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CuK,EAAAtK,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9D+H,EAAAtK,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAYJuH,EAAAtK,UAAAuK,0CAAA,SAA0CtF,EAAYO,EAAY1B,EAAuBC,EAAiCC,GAC7H,QADqE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACxFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,uGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,qBAAqBhB,mBAAmBgF,OAAOF,IAAI,YAC9GO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBuG,EAAAtK,UAAAwK,+BAAA,SAA+B3G,EAAoCC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,0BACpE,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBuG,EAAAtK,UAAAyK,gCAAA,SAAgCC,EAAmC5G,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7F,IAEII,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAyBjE,KAAK6B,cAAcxB,SAAQ,oBACvEuJ,EACA,CACIlG,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBuG,EAAAtK,UAAA2K,oCAAA,SAAoC1F,EAAYnB,EAAuBC,EAAiCC,GAC3G,QADmD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,qBAAqBhB,mBAAmBgF,OAAOF,IAC5G,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBuG,EAAAtK,UAAA4K,8BAAA,SAA8BvF,EAAiCvB,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEzF,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA4C5D,KAAK6B,cAAcxB,SAAQ,oBAC1F,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBuG,EAAAtK,UAAA6K,kCAAA,SAAkC5F,EAAYI,EAAgCvB,EAAuBC,EAAiCC,GACzI,QADiF,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpGkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,+FAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAqC5D,KAAK6B,cAAcxB,SAAQ,qBAAqBhB,mBAAmBgF,OAAOF,IAClI,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAarBuG,EAAAtK,UAAA8K,2CAAA,SAA2CC,EAAqDjH,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE1H,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,6BAC3D4J,EACA,CACIvG,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBuG,EAAAtK,UAAAgL,6CAAA,SAA6C/F,EAAYO,EAAY1B,EAAuBC,EAAiCC,GAChI,QADwE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAC3FkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,0GAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,qBAAqBhB,mBAAmBgF,OAAOF,IAAI,eAC9GO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBuG,EAAAtK,UAAAiL,qCAAA,SAAqChG,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC3H,QADmE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,kGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAY3E,KAAK6B,cAAcxB,SAAQ,qBAAqBhB,mBAAmBgF,OAAOF,IACzGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBuG,EAAAtK,UAAAkL,mCAAA,SAAmCrH,EAAoCsH,EAAiDrH,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAElJ,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAwB7E,KAAK6B,cAAcxB,SAAQ,oBACtEgK,EACA,CACIxG,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBuG,EAAAtK,UAAAoL,oCAAA,SAAoCnG,EAAYkG,EAAiDrH,EAAuBC,EAAiCC,GAC5J,QADoG,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACvHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,qBAAqBhB,mBAAmBgF,OAAOF,IAC3GkG,EACA,CACI3G,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLAjrB/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAnBLC,EAAAA,2CA4B0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCL/F,SAAAoF,EAAsB3I,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CsL,EAAArL,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9D8I,EAAArL,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAWJsI,EAAArL,UAAAsL,oCAAA,SAAoCC,EAAyCzH,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEvG,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,gBAC3DoK,EACA,CACI/G,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAarBsH,EAAArL,UAAAwL,wCAAA,SAAwCC,EAAuC3H,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEzG,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,cAC3DsK,EACA,CACIjH,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLA3J/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAdLC,EAAAA,2CAuB0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCG/F,SAAAyF,EAAsBhJ,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7C2L,EAAA1L,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9DmJ,EAAA1L,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAYJ2I,EAAA1L,UAAA2L,iCAAA,SAAiC9H,EAAoCC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE/F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,4BACpE,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrB2H,EAAA1L,UAAA4L,kCAAA,SAAkC/G,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEtG,IAEII,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAA2BjE,KAAK6B,cAAcxB,SAAQ,sBACzE0D,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrB2H,EAAA1L,UAAA6L,sCAAA,SAAsC5G,EAAYnB,EAAuBC,EAAiCC,GAC7G,QADqD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACxEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,mGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,uBAAuBhB,mBAAmBgF,OAAOF,IAC9G,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrB2H,EAAA1L,UAAA8L,gCAAA,SAAgCzG,EAAmCvB,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA8C5D,KAAK6B,cAAcxB,SAAQ,sBAC5F,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerB2H,EAAA1L,UAAA+L,oCAAA,SAAoC9G,EAAYI,EAAkCvB,EAAuBC,EAAiCC,GAC7I,QADqF,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACxGkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAuC5D,KAAK6B,cAAcxB,SAAQ,uBAAuBhB,mBAAmBgF,OAAOF,IACtI,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerB2H,EAAA1L,UAAAgM,uCAAA,SAAuC/G,EAAYO,EAAe1B,EAAuBC,EAAiCC,GAC7H,QADqE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACxFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,oGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAY3E,KAAK6B,cAAcxB,SAAQ,uBAAuBhB,mBAAmBgF,OAAOF,IAC3GO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerB2H,EAAA1L,UAAAiM,qCAAA,SAAqCpI,EAAoCgB,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7I,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAwB7E,KAAK6B,cAAcxB,SAAQ,sBACtE0D,EACA,CACIF,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerB2H,EAAA1L,UAAAkM,sCAAA,SAAsCjH,EAAYJ,EAA0Cf,EAAuBC,EAAiCC,GACvJ,QAD+F,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAClHkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,mGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,uBAAuBhB,mBAAmBgF,OAAOF,IAC7GJ,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLAnhB/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAjBLC,EAAAA,2CA0B0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCL/F,SAAAkG,EAAsBzJ,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CoM,EAAAnM,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9D4J,EAAAnM,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAWJoJ,EAAAnM,UAAAoM,mCAAA,SAAmCvH,EAA0Cf,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAEvG,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAajE,KAAK6B,cAAcxB,SAAQ,iBAC3D0D,EACA,CACIL,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBoI,EAAAnM,UAAAqM,iCAAA,SAAiCpH,EAAYnB,EAAuBC,EAAiCC,GACxG,QADgD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACnEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,8FAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IACzG,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAarBoI,EAAAnM,UAAAsM,oCAAA,SAAoCrH,EAAYnB,EAAuBC,EAAiCC,GAC3G,QADmD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACtEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,iGAGpB,IAAIc,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAIxCA,EAA2BxD,KAAK6B,cAAcZ,mBAFV,SAIPD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAY5D,KAAK6B,cAAcxB,SAAQ,kBAAkBhB,mBAAmBgF,OAAOF,IAAI,QAC1G,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLAxM/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAZLC,EAAAA,2CAqB0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCQ/F,SAAAsG,EAAsB7J,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CwM,EAAAvM,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9DgK,EAAAvM,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAYJwJ,EAAAvM,UAAAwM,6BAAA,SAA6B3I,EAAoCC,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE3F,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAsB5D,KAAK6B,cAAcxB,SAAQ,kBACpE,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwI,EAAAvM,UAAAyM,8BAAA,SAA8BC,EAAqD5I,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7G,IAEII,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWqC,KAAuBjE,KAAK6B,cAAcxB,SAAQ,YACrEuL,EACA,CACIlI,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwI,EAAAvM,UAAA2M,kCAAA,SAAkC1H,EAAYnB,EAAuBC,EAAiCC,GACzG,QADiD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpEkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,+FAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWwC,OAAepE,KAAK6B,cAAcxB,SAAQ,aAAahB,mBAAmBgF,OAAOF,IACpG,CACIT,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAcrBwI,EAAAvM,UAAA4M,4BAAA,SAA4BvH,EAA+BvB,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAErF,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAA0C5D,KAAK6B,cAAcxB,SAAQ,YACxF,CACIwD,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwI,EAAAvM,UAAA6M,gCAAA,SAAgC5H,EAAYI,EAA8BvB,EAAuBC,EAAiCC,GACrI,QAD6E,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAChGkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,6FAGpB,IAAIW,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDgE,MAAAA,IACFpB,EAAkBnD,KAAKgC,gBAAgBmB,EAChCoB,EAAQ,WAGjB,IAEIlB,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAmC5D,KAAK6B,cAAcxB,SAAQ,aAAahB,mBAAmBgF,OAAOF,IACxH,CACIN,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwI,EAAAvM,UAAA8M,mCAAA,SAAmC7H,EAAYO,EAAe1B,EAAuBC,EAAiCC,GACzH,QADiE,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACpFkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,gGAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAW+C,IAAY3E,KAAK6B,cAAcxB,SAAQ,aAAahB,mBAAmBgF,OAAOF,IACjGO,EACA,CACIhB,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwI,EAAAvM,UAAA+M,iCAAA,SAAiClJ,EAAoC6E,EAA6C5E,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE5I,IAAIE,EAAkB,IAAIC,EAAAA,WAAW,CAAC7C,QAASP,KAAKO,UAChDwC,MAAAA,IACFI,EAAkBnD,KAAKgC,gBAAgBmB,EAChCJ,EAAO,UAGhB,IAEIM,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAwB7E,KAAK6B,cAAcxB,SAAQ,YACtEuH,EACA,CACI/D,OAAQV,EACRO,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,KAerBwI,EAAAvM,UAAAgN,kCAAA,SAAkC/H,EAAY4B,EAAmE/C,EAAuBC,EAAiCC,GAC5K,QADoH,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GACvIkB,MAAAA,EACA,MAAM,IAAI3B,MAAM,+FAGpB,IAEIa,EAFAC,EAAUtD,KAAK8B,gBAInBuB,EAAarD,KAAK6B,cAAcL,iBAAiB,iBAE7C8B,EAAUA,EAAQC,IAAI,gBAAiB,UAAYF,IAGvD,IAAIG,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAKpC,IAGMQ,EAA8ChE,KAAK6B,cAAcpB,wBAH5C,CACvB,0BAG4BO,IAA5BgD,IACAV,EAAUA,EAAQC,IAAI,eAAgBS,IAG1C,IAAIN,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWiD,MAAc7E,KAAK6B,cAAcxB,SAAQ,aAAahB,mBAAmBgF,OAAOF,IACnG4B,EACA,CACIrC,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLAnhB/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDApBLC,EAAAA,2CA6B0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,+BCP/F,SAAAgH,EAAsBvK,EAAsDvB,EAA8BwB,GAApF7B,KAAA4B,WAAAA,EALZ5B,KAAAK,SAAW,uBACdL,KAAA8B,eAAiB,IAAIC,EAAAA,YACrB/B,KAAA6B,cAAgB,IAAIhC,EAInBgC,IACA7B,KAAK6B,cAAgBA,GAEkB,iBAAhC7B,KAAK6B,cAAcxB,WACF,iBAAbA,IACPA,EAAWL,KAAKK,UAEpBL,KAAK6B,cAAcxB,SAAWA,GAElCL,KAAKO,QAAUP,KAAK6B,cAActB,SAAW,IAAItB,SAI7CkN,EAAAjN,UAAA8C,gBAAA,SAAgBC,EAAwBP,EAAYD,GAMxD,OAJIQ,EADiB,iBAAVP,GAAsBA,aAAiBQ,OAAS,EAC1ClC,KAAKmC,yBAAyBF,EAAYP,GAE1C1B,KAAKmC,yBAAyBF,EAAYP,EAAOD,IAK9D0K,EAAAjN,UAAAiD,yBAAA,SAAyBF,EAAwBP,EAAaD,GAA9D,IAAA1B,EAAAC,KACJ,GAAa,MAAT0B,EACA,OAAOO,EAGX,GAAqB,iBAAVP,EACP,GAAIU,MAAMC,QAAQX,GACbA,EAAgBY,SAAS,SAAAC,GAAQ,OAAAN,EAAalC,EAAKoC,yBAAyBF,EAAYM,EAAMd,WAC5F,GAAIC,aAAiBQ,KAAM,CAC9B,GAAW,MAAPT,EAID,MAAMe,MAAM,wCAHXP,EAAaA,EAAWQ,OAAOhB,EAC1BC,EAAegB,cAAcC,OAAO,EAAG,UAKhDC,OAAOC,KAAKnB,GAAOY,SAAS,SAAAlD,GAAK,OAAA6C,EAAalC,EAAKoC,yBAC/CF,EAAYP,EAAMtC,GAAW,MAAPqC,EAAiBA,EAAG,IAAIrC,EAAMA,UAEzD,CAAA,GAAW,MAAPqC,EAGP,MAAMe,MAAM,uDAFZP,EAAaA,EAAWQ,OAAOhB,EAAKC,GAIxC,OAAOO,GAUJkK,EAAAjN,UAAAkN,mBAAA,SAAmBpJ,EAAuBC,EAAiCC,QAAxD,IAAAF,IAAAA,EAAA,aAAuB,IAAAC,IAAAA,GAAA,GAE7C,IAAIK,EAAUtD,KAAK8B,eAEf0B,EAA+CN,GAAWA,EAAQO,iBACtE,QAAiCzC,IAA7BwC,EAAwC,CAKxCA,EAA2BxD,KAAK6B,cAAcZ,mBAHV,CAChC,0BAIyBD,IAA7BwC,IACAF,EAAUA,EAAQC,IAAI,SAAUC,IAIpC,IAAIE,EAAgC,OAKpC,OAJGF,GAA4BA,EAAyBG,WAAW,UAC/DD,EAAe,QAGZ1D,KAAK4B,WAAWgC,IAAqB5D,KAAK6B,cAAcxB,SAAQ,QACnE,CACIqD,aAAmBA,EACnBpD,gBAAiBN,KAAK6B,cAAcvB,gBACpCgD,QAASA,EACTN,QAASA,EACTC,eAAgBA,mLA/F/B8B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAbLC,EAAAA,2CAsB0CC,EAAAA,UAAQ,CAAAvE,KAAGwE,EAAAA,OAAMJ,KAAA,CAACrF,YAd5DE,EAAawF,WAAA,CAAA,CAAAzE,KAc6EuE,EAAAA,kBCdlFkH,ECJAC,ECUAC,ECGAC,ECDAC,ECCAC,ECbJC,EAAO,CAAChL,EAAkC2D,EAAkCmD,EAA+Be,EAAkCe,EAAoCK,EAAoCS,EAA+BI,EAAgCU,ICDhRS,EAAAA,uBAAAA,EAAAA,qBAAoB,KAEpBC,SAAW,CACpBC,MAAO,QACPC,QAAS,UACTC,SAAU,WACVC,MAAO,UPDEZ,EAAAA,EAAAA,wBAAAA,EAAAA,sBAAqB,KAErBQ,SAAW,CACpBC,MAAO,QACPC,QAAS,UACTC,SAAU,WACVC,MAAO,SAGEZ,EAAAa,cAAgB,CACzBC,KAAM,OACNC,YAAa,iBQUJC,EAAAA,qBAAAA,EAAAA,mBAAkB,KAElBC,cAAgB,CACzBC,MAAO,QACPC,MAAO,QACPC,QAAS,UACTC,IAAK,MACLxL,KAAM,SPhCGoK,EAAAA,EAAAA,sBAAAA,EAAAA,oBAAmB,KAEnBqB,cAAgB,CACzBC,OAAQ,SACRC,KAAM,OACNC,UAAW,YACXC,KAAM,QAGGzB,EAAA0B,iBAAmB,CAC5BJ,OAAQ,SACRC,KAAM,OACNC,UAAW,YACXC,KAAM,SCHGxB,EAAAA,EAAAA,aAAAA,EAAAA,WAAU,KAEV0B,aAAe,CACxBC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGK7B,EAAA8B,UAAY,CACrBC,UAAW,YACXC,QAAS,WAGAhC,EAAAM,SAAW,CACpB2B,OAAQ,SACRC,aAAc,gBACdC,WAAY,aACZC,WAAY,cACZC,UAAW,aACXC,YAAa,eACbC,aAAc,gBACdC,MAAO,UClBEvC,EAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAEjByB,aAAe,CACxBC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGK5B,EAAA6B,UAAY,CACrBC,UAAW,YACXC,QAAS,WAGA/B,EAAAK,SAAW,CACpB2B,OAAQ,SACRC,aAAc,gBACdC,WAAY,aACZC,WAAY,cACZC,UAAW,aACXC,YAAa,eACbC,aAAc,gBACdC,MAAO,UCtBEtC,EAAAA,EAAAA,+BAAAA,EAAAA,6BAA4B,KAE5BwB,aAAe,CACxBC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGK3B,EAAA4B,UAAY,CACrBC,UAAW,YACXC,QAAS,WAGA9B,EAAAI,SAAW,CACpB2B,OAAQ,SACRC,aAAc,gBACdC,WAAY,aACZC,WAAY,cACZC,UAAW,aACXC,YAAa,eACbC,aAAc,gBACdC,MAAO,UCpBErC,EAAAA,EAAAA,0BAAAA,EAAAA,wBAAuB,KAEvBuB,aAAe,CACxBC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGK1B,EAAA2B,UAAY,CACrBC,UAAW,YACXC,QAAS,WAGA7B,EAAAG,SAAW,CACpB2B,OAAQ,SACRC,aAAc,gBACdC,WAAY,aACZC,WAAY,cACZC,UAAW,aACXC,YAAa,eACbC,aAAc,gBACdC,MAAO,UIlCEC,EAAAA,yBAAAA,EAAAA,uBAAsB,KAEtBC,UAAY,CACrBC,gBAAiB,mBACjBC,gBAAiB,mBACjBC,WAAY,aACZC,SAAU,WACVC,gBAAiB,mBACjBC,cAAe,iBACfC,4BAA6B,gCAC7BC,qBAAsB,0BCebC,EAAAA,oBAAAA,EAAAA,kBAAiB,KAEjBpC,cAAgB,CACzBC,MAAO,QACPC,MAAO,QACPC,QAAS,UACTC,IAAK,MACLxL,KAAM,yBCtBV,SAAAyN,EAAqCC,EACZC,GACrB,GAAID,EACA,MAAM,IAAIpN,MAAM,oEAEpB,IAAKqN,EACD,MAAM,IAAIrN,MAAM,gIAbVmN,EAAAG,QAAP,SAAeC,GAClB,MAAO,CACHC,SAAUL,EACVM,UAAW,CAAE,CAAEC,QAASrQ,EAAesQ,WAAYJ,+BAV9DK,EAAAA,SAAQpL,KAAA,CAAC,CACRqL,QAAc,GACdC,aAAc,GACdC,QAAc,GACdN,UAAW,gDAU0CN,EAAStK,WAAA,CAAA,CAAAzE,KAA9CuE,EAAAA,UAAQ,CAAAvE,KAAI4P,EAAAA,kBA1BrBtL,EAAAA,WAAUG,WAAA,CAAA,CAAAzE,KA2BDuE,EAAAA,wEtB1BgB,CAC9BsL,IAAO,IACPC,IAAO,MACPC,IAAO,IACPC,MAAS","sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default bearerAuth credential\n        if (!this.credentials['bearerAuth']) {\n            this.credentials['bearerAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeDashboard } from '../model/models';\nimport { GrowbeDashboardFilter } from '../model/models';\nimport { GrowbeDashboardFilter1 } from '../model/models';\nimport { GrowbeDashboardWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeDashboardControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeDashboardControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/dashboards/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeDashboard\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeDashboard>;\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeDashboard>>;\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeDashboard>>;\n    public growbeDashboardControllerCreate(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeDashboard>(`${this.configuration.basePath}/dashboards`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeDashboard\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeDashboardControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeDashboardControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeDashboardControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeDashboardWithRelations>>;\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeDashboardWithRelations>>>;\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeDashboardWithRelations>>>;\n    public growbeDashboardControllerFind(filter?: GrowbeDashboardFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeDashboardWithRelations>>(`${this.configuration.basePath}/dashboards`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeDashboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeDashboardWithRelations>;\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeDashboardWithRelations>>;\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeDashboardWithRelations>>;\n    public growbeDashboardControllerFindById(id: string, filter?: GrowbeDashboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeDashboardWithRelations>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeDashboard\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeDashboardControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeDashboardControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/dashboards`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeDashboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeDashboardControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeDashboardControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/dashboards/${encodeURIComponent(String(id))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BaseDashboardElement } from '../model/models';\nimport { DashboardGraphElement } from '../model/models';\nimport { GraphDataConfig } from '../model/models';\nimport { GrowbeLogs } from '../model/models';\nimport { GrowbeMainboard } from '../model/models';\nimport { GrowbeMainboardExcludingId } from '../model/models';\nimport { GrowbeMainboardFilter } from '../model/models';\nimport { GrowbeMainboardFilter1 } from '../model/models';\nimport { GrowbeMainboardPartial } from '../model/models';\nimport { GrowbeMainboardPartialExcludingId } from '../model/models';\nimport { GrowbeMainboardWithRelations } from '../model/models';\nimport { GrowbeModule } from '../model/models';\nimport { GrowbeRegisterRequest } from '../model/models';\nimport { GrowbeRegisterResponse } from '../model/models';\nimport { GrowbeSensorValue } from '../model/models';\nimport { GrowbeWarning } from '../model/models';\nimport { GrowbeWarningPartial } from '../model/models';\nimport { GrowbeWarningPartialExcludingId } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeMainboardControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerBaseDashboardElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BaseDashboardElement>;\n    public growbeMainboardControllerBaseDashboardElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BaseDashboardElement>>;\n    public growbeMainboardControllerBaseDashboardElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BaseDashboardElement>>;\n    public growbeMainboardControllerBaseDashboardElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BaseDashboardElement>(`${this.configuration.basePath}/model/baseDashboardElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeMainboardControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbes/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param growbeMainboardExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeMainboard>;\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeMainboard>>;\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeMainboard>>;\n    public growbeMainboardControllerCreate(growbeMainboardExcludingId?: GrowbeMainboardExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeMainboard>(`${this.configuration.basePath}/growbes`,\n            growbeMainboardExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerCreateRelationModel_1(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel_1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerCreateRelationModel_2(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel_2.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeMainboard\n     * @param id \n     * @param growbeWarningPartialExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerCreateRelationModel_3(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerCreateRelationModel_3.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings`,\n            growbeWarningPartialExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDashboardClockStateElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BaseDashboardElement>;\n    public growbeMainboardControllerDashboardClockStateElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardClockStateElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardClockStateElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BaseDashboardElement>(`${this.configuration.basePath}/model/dashboardClockStateElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDashboardGraphElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<DashboardGraphElement>;\n    public growbeMainboardControllerDashboardGraphElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<DashboardGraphElement>>;\n    public growbeMainboardControllerDashboardGraphElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<DashboardGraphElement>>;\n    public growbeMainboardControllerDashboardGraphElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<DashboardGraphElement>(`${this.configuration.basePath}/model/dashboardGraphElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDashboardLastValueElement(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BaseDashboardElement>;\n    public growbeMainboardControllerDashboardLastValueElement(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardLastValueElement(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BaseDashboardElement>>;\n    public growbeMainboardControllerDashboardLastValueElement(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BaseDashboardElement>(`${this.configuration.basePath}/model/dashboardLastValueElement`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerDelRelationModel(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerDelRelationModel_4(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel_4.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel_4.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerDelRelationModel_5(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel_5.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel_5.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerDelRelationModel_6(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDelRelationModel_6.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerDelRelationModel_6.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeMainboard\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeMainboardControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeMainboardWithRelations>>;\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeMainboardWithRelations>>>;\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeMainboardWithRelations>>>;\n    public growbeMainboardControllerFind(filter?: GrowbeMainboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeMainboardWithRelations>>(`${this.configuration.basePath}/growbes`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeMainboardWithRelations>;\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeMainboardWithRelations>>;\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeMainboardWithRelations>>;\n    public growbeMainboardControllerFindById(id: string, filter?: GrowbeMainboardFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeMainboardWithRelations>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisation(id: string, filter?: GrowbeMainboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeOrganisation.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/organisations/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeOrganisationCount(id: string, where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeOrganisationCount.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/organisations/${encodeURIComponent(String(id))}/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeUser(id: string, filter?: GrowbeMainboardFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeUser.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/user/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerFindGrowbeUserCount(id: string, where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindGrowbeUserCount.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbes/user/${encodeURIComponent(String(id))}/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerFindRelationModel_7(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel_7.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerFindRelationModel_8(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel_8.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerFindRelationModel_9(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerFindRelationModel_9.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerGetRelationModel_10(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel_10.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel_10.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerGetRelationModel_11(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel_11.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel_11.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerGetRelationModel_12(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerGetRelationModel_12.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerGetRelationModel_12.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerGraphDataConfig(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GraphDataConfig>;\n    public growbeMainboardControllerGraphDataConfig(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GraphDataConfig>>;\n    public growbeMainboardControllerGraphDataConfig(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GraphDataConfig>>;\n    public growbeMainboardControllerGraphDataConfig(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GraphDataConfig>(`${this.configuration.basePath}/model/graphDataConfig`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeLogs>;\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeLogs>>;\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeLogs>>;\n    public growbeMainboardControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeLogs>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeLogs/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeMainboardControllerPutRelationModelById_13(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById_13.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById_13.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeModule>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeModules/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeMainboardControllerPutRelationModelById_14(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById_14.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById_14.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeSensorValue>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param fk \n     * @param growbeWarningPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeMainboardControllerPutRelationModelById_15(id: string, fk: string, growbeWarningPartial?: GrowbeWarningPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerPutRelationModelById_15.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeMainboardControllerPutRelationModelById_15.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeWarning>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/growbeWarnings/${encodeURIComponent(String(fk))}`,\n            growbeWarningPartial,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param growbeRegisterRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeRegisterResponse>;\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeRegisterResponse>>;\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeRegisterResponse>>;\n    public growbeMainboardControllerRegisterGrowbe(growbeRegisterRequest?: GrowbeRegisterRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeRegisterResponse>(`${this.configuration.basePath}/growbe/register`,\n            growbeRegisterRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param orgId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerRegisterOrganisation(id: string, orgId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerRegisterOrganisation.');\n        }\n        if (orgId === null || orgId === undefined) {\n            throw new Error('Required parameter orgId was null or undefined when calling growbeMainboardControllerRegisterOrganisation.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}/register/org/${encodeURIComponent(String(orgId))}`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeMainboard\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerSetGrowbeConfig(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerSetGrowbeConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbe/${encodeURIComponent(String(id))}/config`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerSetGrowbeRTC(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerSetGrowbeRTC.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbe/${encodeURIComponent(String(id))}/rtc`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerSetGrowbeSync(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerSetGrowbeSync.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbe/${encodeURIComponent(String(id))}/sync`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param growbeMainboardPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeMainboardControllerUpdateAll(where?: { [key: string]: object; }, growbeMainboardPartial?: GrowbeMainboardPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbes`,\n            growbeMainboardPartial,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeMainboard\n     * @param id \n     * @param growbeMainboardPartialExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeMainboardControllerUpdateById(id: string, growbeMainboardPartialExcludingId?: GrowbeMainboardPartialExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeMainboardControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbes/${encodeURIComponent(String(id))}`,\n            growbeMainboardPartialExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeModule } from '../model/models';\nimport { GrowbeModuleFilter } from '../model/models';\nimport { GrowbeModuleFilter1 } from '../model/models';\nimport { GrowbeModuleWithRelations } from '../model/models';\nimport { GrowbeSensorValue } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeModuleControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbeModules/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeModule\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModule>;\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModule>>;\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModule>>;\n    public growbeModuleControllerCreate(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeModule>(`${this.configuration.basePath}/growbeModules`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeModule\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerCreateRelationModel(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerCreateRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeModule\n     * @param id \n     * @param fk \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerDelRelationModel(id: string, fk: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerDelRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeModuleControllerDelRelationModel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeModule\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeModuleWithRelations>>;\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeModuleWithRelations>>>;\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeModuleWithRelations>>>;\n    public growbeModuleControllerFind(filter?: GrowbeModuleFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeModuleWithRelations>>(`${this.configuration.basePath}/growbeModules`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModuleWithRelations>;\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModuleWithRelations>>;\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModuleWithRelations>>;\n    public growbeModuleControllerFindById(id: string, filter?: GrowbeModuleFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModuleWithRelations>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerFindRelationModel(id: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerFindRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModule\n     * @param id \n     * @param fk \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerGetRelationModel(id: string, fk: string, filter?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerGetRelationModel.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeModuleControllerGetRelationModel.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeModule\n     * @param id \n     * @param fk \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeModuleControllerPutRelationModelById(id: string, fk: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerPutRelationModelById.');\n        }\n        if (fk === null || fk === undefined) {\n            throw new Error('Required parameter fk was null or undefined when calling growbeModuleControllerPutRelationModelById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GrowbeSensorValue>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/growbeSensorValues/${encodeURIComponent(String(fk))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeModule\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerSetConfig(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerSetConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}/config`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbeModules`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeModule\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbeModules/${encodeURIComponent(String(id))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeModuleDef } from '../model/models';\nimport { GrowbeModuleDefFilter } from '../model/models';\nimport { GrowbeModuleDefFilter1 } from '../model/models';\nimport { GrowbeModuleDefPartial } from '../model/models';\nimport { GrowbeModuleDefWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\nimport { OverrideModuleDefRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeModuleDefControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerAddHardwareAlarm(id: string, body?: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerAddHardwareAlarm.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}/addAlarm`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModuleDef\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleDefControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbeModuleDefs/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeModuleDef\n     * @param growbeModuleDef \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModuleDef>;\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModuleDef>>;\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModuleDef>>;\n    public growbeModuleDefControllerCreate(growbeModuleDef?: GrowbeModuleDef, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeModuleDef>(`${this.configuration.basePath}/growbeModuleDefs`,\n            growbeModuleDef,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeModuleDef\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleDefControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModuleDef\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeModuleDefWithRelations>>;\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeModuleDefWithRelations>>>;\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeModuleDefWithRelations>>>;\n    public growbeModuleDefControllerFind(filter?: GrowbeModuleDefFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeModuleDefWithRelations>>(`${this.configuration.basePath}/growbeModuleDefs`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeModuleDef\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeModuleDefWithRelations>;\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeModuleDefWithRelations>>;\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeModuleDefWithRelations>>;\n    public growbeModuleDefControllerFindById(id: string, filter?: GrowbeModuleDefFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeModuleDefWithRelations>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param overrideModuleDefRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerOverrideModuleDef(overrideModuleDefRequest?: OverrideModuleDefRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModuleDefs/override`,\n            overrideModuleDefRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerRemoveHardwareAlarm(id: string, body?: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerRemoveHardwareAlarm.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}/removeAlarm`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeModuleDef\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param growbeModuleDefPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeModuleDefControllerUpdateAll(where?: { [key: string]: object; }, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbeModuleDefs`,\n            growbeModuleDefPartial,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeModuleDef\n     * @param id \n     * @param growbeModuleDefPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeModuleDefControllerUpdateById(id: string, growbeModuleDefPartial?: GrowbeModuleDefPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeModuleDefControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbeModuleDefs/${encodeURIComponent(String(id))}`,\n            growbeModuleDefPartial,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GraphModuleRequest } from '../model/models';\nimport { ModuleDataRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeModuleGraphControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param graphModuleRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleGraphControllerGetGraph(graphModuleRequest?: GraphModuleRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbe/graph`,\n            graphModuleRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param moduleDataRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeModuleGraphControllerGetLastValue(moduleDataRequest?: ModuleDataRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbe/one`,\n            moduleDataRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeSensorValue } from '../model/models';\nimport { GrowbeSensorValueFilter } from '../model/models';\nimport { GrowbeSensorValueFilter1 } from '../model/models';\nimport { GrowbeSensorValueWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeSensorValueControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeSensorValueControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/growbeSensorValues/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeSensorValue\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValue>;\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValue>>;\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValue>>;\n    public growbeSensorValueControllerCreate(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeSensorValue>(`${this.configuration.basePath}/growbeSensorValues`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeSensorValue\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeSensorValueControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeSensorValueControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeSensorValueControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeSensorValueWithRelations>>;\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeSensorValueWithRelations>>>;\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeSensorValueWithRelations>>>;\n    public growbeSensorValueControllerFind(filter?: GrowbeSensorValueFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeSensorValueWithRelations>>(`${this.configuration.basePath}/growbeSensorValues`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeSensorValue\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeSensorValueWithRelations>;\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeSensorValueWithRelations>>;\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeSensorValueWithRelations>>;\n    public growbeSensorValueControllerFindById(id: string, filter?: GrowbeSensorValueFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeSensorValueWithRelations>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeSensorValue\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeSensorValueControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeSensorValueControllerUpdateAll(where?: { [key: string]: object; }, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/growbeSensorValues`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeSensorValue\n     * @param id \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeSensorValueControllerUpdateById(id: string, requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeSensorValueControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/growbeSensorValues/${encodeURIComponent(String(id))}`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeStreamControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeStreamControllerCreateStream(requestBody?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/growbeStreams`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeStream\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeStreamControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeStreamControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeStreamControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeStreamControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeStreamControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/growbeStreams/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeStreamControllerGetLiveStream(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public growbeStreamControllerGetLiveStream(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public growbeStreamControllerGetLiveStream(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public growbeStreamControllerGetLiveStream(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeStreamControllerGetLiveStream.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/growbeStreams/${encodeURIComponent(String(id))}/live`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GrowbeWarning } from '../model/models';\nimport { GrowbeWarningExcludingId } from '../model/models';\nimport { GrowbeWarningFilter } from '../model/models';\nimport { GrowbeWarningFilter1 } from '../model/models';\nimport { GrowbeWarningPartial } from '../model/models';\nimport { GrowbeWarningPartialExcludingId } from '../model/models';\nimport { GrowbeWarningWithRelations } from '../model/models';\nimport { LoopbackCount } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GrowbeWarningControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a filter list of GrowbeWarning\n     * @param where \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeWarningControllerCount(where?: { [key: string]: object; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<LoopbackCount>(`${this.configuration.basePath}/warnings/count`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of GrowbeWarning\n     * @param growbeWarningExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarning>;\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarning>>;\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarning>>;\n    public growbeWarningControllerCreate(growbeWarningExcludingId?: GrowbeWarningExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GrowbeWarning>(`${this.configuration.basePath}/warnings`,\n            growbeWarningExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a instance of GrowbeWarning\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerDeleteById(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeWarningControllerDeleteById(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeWarningControllerDeleteById(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeWarningControllerDeleteById(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerDeleteById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeWarning\n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<GrowbeWarningWithRelations>>;\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<GrowbeWarningWithRelations>>>;\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<GrowbeWarningWithRelations>>>;\n    public growbeWarningControllerFind(filter?: GrowbeWarningFilter1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<GrowbeWarningWithRelations>>(`${this.configuration.basePath}/warnings`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a filter list of GrowbeWarning\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GrowbeWarningWithRelations>;\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GrowbeWarningWithRelations>>;\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GrowbeWarningWithRelations>>;\n    public growbeWarningControllerFindById(id: string, filter?: GrowbeWarningFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GrowbeWarningWithRelations>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Replace a instance of GrowbeWarning\n     * @param id \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeWarningControllerReplaceById(id: string, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerReplaceById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * PATCH success count\n     * @param where \n     * @param growbeWarningPartial \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoopbackCount>;\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoopbackCount>>;\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoopbackCount>>;\n    public growbeWarningControllerUpdateAll(where?: { [key: string]: object; }, growbeWarningPartial?: GrowbeWarningPartial, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (where !== undefined && where !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>where, 'where');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<LoopbackCount>(`${this.configuration.basePath}/warnings`,\n            growbeWarningPartial,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a instance of GrowbeWarning\n     * @param id \n     * @param growbeWarningPartialExcludingId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public growbeWarningControllerUpdateById(id: string, growbeWarningPartialExcludingId?: GrowbeWarningPartialExcludingId, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling growbeWarningControllerUpdateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<any>(`${this.configuration.basePath}/warnings/${encodeURIComponent(String(id))}`,\n            growbeWarningPartialExcludingId,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PingResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PingControllerService {\n\n    protected basePath = 'http://localhost/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerPing(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerPing(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerPing(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerPing(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PingResponse>(`${this.configuration.basePath}/ping`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GraphDataConfig } from './graphDataConfig';\nimport { ModuleDataRequest } from './moduleDataRequest';\n\n\nexport interface DashboardGraphElement { \n    name?: string;\n    type?: DashboardGraphElement.TypeEnum;\n    graphType?: DashboardGraphElement.GraphTypeEnum;\n    graphConfig?: GraphDataConfig;\n    graphDataConfig?: ModuleDataRequest;\n}\nexport namespace DashboardGraphElement {\n    export type TypeEnum = 'graph' | 'average' | 'lastread' | 'clock';\n    export const TypeEnum = {\n        Graph: 'graph' as TypeEnum,\n        Average: 'average' as TypeEnum,\n        Lastread: 'lastread' as TypeEnum,\n        Clock: 'clock' as TypeEnum\n    };\n    export type GraphTypeEnum = 'line' | 'bar-vertical';\n    export const GraphTypeEnum = {\n        Line: 'line' as GraphTypeEnum,\n        BarVertical: 'bar-vertical' as GraphTypeEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GroupingDataRequest { \n    baseGroup?: Array<GroupingDataRequest.BaseGroupEnum>;\n    intervalUnit?: GroupingDataRequest.IntervalUnitEnum;\n    intervalValue?: number;\n}\nexport namespace GroupingDataRequest {\n    export type BaseGroupEnum = 'minute' | 'hour' | 'dayOfYear' | 'year';\n    export const BaseGroupEnum = {\n        Minute: 'minute' as BaseGroupEnum,\n        Hour: 'hour' as BaseGroupEnum,\n        DayOfYear: 'dayOfYear' as BaseGroupEnum,\n        Year: 'year' as BaseGroupEnum\n    };\n    export type IntervalUnitEnum = 'minute' | 'hour' | 'dayOfYear' | 'year';\n    export const IntervalUnitEnum = {\n        Minute: 'minute' as IntervalUnitEnum,\n        Hour: 'hour' as IntervalUnitEnum,\n        DayOfYear: 'dayOfYear' as IntervalUnitEnum,\n        Year: 'year' as IntervalUnitEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GrowbeLogs { \n  [key: string]: object | any;\n\n\n    id?: string;\n    timestamp?: string;\n    severity?: GrowbeLogs.SeverityEnum;\n    group?: GrowbeLogs.GroupEnum;\n    type?: GrowbeLogs.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogs {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeLogs>, >, schemaOptions: { title: \\'\\', partial: true, exclude: [] })\n */\nexport interface GrowbeLogsPartial { \n  [key: string]: object | any;\n\n\n    id?: string;\n    timestamp?: string;\n    severity?: GrowbeLogsPartial.SeverityEnum;\n    group?: GrowbeLogsPartial.GroupEnum;\n    type?: GrowbeLogsPartial.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogsPartial {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: Omit<Partial<GrowbeLogs>, \\'id\\'>, schemaOptions: { title: \\'\\', partial: true, exclude: [ \\'id\\' ] })\n */\nexport interface GrowbeLogsPartialExcludingId { \n  [key: string]: object | any;\n\n\n    timestamp?: string;\n    severity?: GrowbeLogsPartialExcludingId.SeverityEnum;\n    group?: GrowbeLogsPartialExcludingId.GroupEnum;\n    type?: GrowbeLogsPartialExcludingId.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogsPartialExcludingId {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: GrowbeLogsWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface GrowbeLogsWithRelations { \n  [key: string]: object | any;\n\n\n    id?: string;\n    timestamp?: string;\n    severity?: GrowbeLogsWithRelations.SeverityEnum;\n    group?: GrowbeLogsWithRelations.GroupEnum;\n    type?: GrowbeLogsWithRelations.TypeEnum;\n    message?: string;\n    newState?: object;\n    oldState?: object;\n    growbeMainboardId?: string;\n    growbeModuleId?: string;\n}\nexport namespace GrowbeLogsWithRelations {\n    export type SeverityEnum = '0' | '1' | '2';\n    export const SeverityEnum = {\n        _0: '0' as SeverityEnum,\n        _1: '1' as SeverityEnum,\n        _2: '2' as SeverityEnum\n    };\n    export type GroupEnum = 'mainboard' | 'modules';\n    export const GroupEnum = {\n        Mainboard: 'mainboard' as GroupEnum,\n        Modules: 'modules' as GroupEnum\n    };\n    export type TypeEnum = 'module' | 'module_config' | 'connection' | 'new_warning' | 'update_rtc' | 'sync_request' | 'growbe_config' | 'alarm';\n    export const TypeEnum = {\n        Module: 'module' as TypeEnum,\n        ModuleConfig: 'module_config' as TypeEnum,\n        Connection: 'connection' as TypeEnum,\n        NewWarning: 'new_warning' as TypeEnum,\n        UpdateRtc: 'update_rtc' as TypeEnum,\n        SyncRequest: 'sync_request' as TypeEnum,\n        GrowbeConfig: 'growbe_config' as TypeEnum,\n        Alarm: 'alarm' as TypeEnum\n    };\n}\n\n\n","export * from './growbeDashboardController.service';\nimport { GrowbeDashboardControllerService } from './growbeDashboardController.service';\nexport * from './growbeMainboardController.service';\nimport { GrowbeMainboardControllerService } from './growbeMainboardController.service';\nexport * from './growbeModuleController.service';\nimport { GrowbeModuleControllerService } from './growbeModuleController.service';\nexport * from './growbeModuleDefController.service';\nimport { GrowbeModuleDefControllerService } from './growbeModuleDefController.service';\nexport * from './growbeModuleGraphController.service';\nimport { GrowbeModuleGraphControllerService } from './growbeModuleGraphController.service';\nexport * from './growbeSensorValueController.service';\nimport { GrowbeSensorValueControllerService } from './growbeSensorValueController.service';\nexport * from './growbeStreamController.service';\nimport { GrowbeStreamControllerService } from './growbeStreamController.service';\nexport * from './growbeWarningController.service';\nimport { GrowbeWarningControllerService } from './growbeWarningController.service';\nexport * from './pingController.service';\nimport { PingControllerService } from './pingController.service';\nexport const APIS = [GrowbeDashboardControllerService, GrowbeMainboardControllerService, GrowbeModuleControllerService, GrowbeModuleDefControllerService, GrowbeModuleGraphControllerService, GrowbeSensorValueControllerService, GrowbeStreamControllerService, GrowbeWarningControllerService, PingControllerService];\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface BaseDashboardElement { \n    name?: string;\n    type?: BaseDashboardElement.TypeEnum;\n}\nexport namespace BaseDashboardElement {\n    export type TypeEnum = 'graph' | 'average' | 'lastread' | 'clock';\n    export const TypeEnum = {\n        Graph: 'graph' as TypeEnum,\n        Average: 'average' as TypeEnum,\n        Lastread: 'lastread' as TypeEnum,\n        Clock: 'clock' as TypeEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GroupingDataRequest } from './groupingDataRequest';\n\n\nexport interface GraphModuleRequest { \n    /**\n     * ID of the growbe to get data\n     */\n    growbeId?: string;\n    /**\n     * Module to get the data from\n     */\n    moduleId?: string;\n    /**\n     * Last X Unit of time , default to Date\n     */\n    lastX?: number;\n    lastXUnit?: GraphModuleRequest.LastXUnitEnum;\n    /**\n     * if specify , get data from interval from this date\n     */\n    from?: string;\n    /**\n     * if specify , get data from interval before this date\n     */\n    to?: string;\n    fields?: Array<string>;\n    /**\n     * if true the data will be fetch , only possible with lastX\n     */\n    liveUpdate?: boolean;\n    grouping?: GroupingDataRequest;\n}\nexport namespace GraphModuleRequest {\n    export type LastXUnitEnum = 'Month' | 'Hours' | 'Minutes' | 'Day' | 'Date';\n    export const LastXUnitEnum = {\n        Month: 'Month' as LastXUnitEnum,\n        Hours: 'Hours' as LastXUnitEnum,\n        Minutes: 'Minutes' as LastXUnitEnum,\n        Day: 'Day' as LastXUnitEnum,\n        Date: 'Date' as LastXUnitEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GrowbeMainboard } from './growbeMainboard';\n\n\nexport interface GrowbeRegisterResponse { \n    state?: GrowbeRegisterResponse.StateEnum;\n    growbe?: GrowbeMainboard;\n}\nexport namespace GrowbeRegisterResponse {\n    export type StateEnum = 'BEATH_UNREGISTER' | 'UNBEATH_REGISTER' | 'UNREGISTER' | 'REGISTER' | 'ALREADY_REGISTER' | 'NOT_ACCESSIBLE' | 'ALREADY_REGISTER_ORGANISATION' | 'REGISTER_ORGANISATION';\n    export const StateEnum = {\n        BeathUnregister: 'BEATH_UNREGISTER' as StateEnum,\n        UnbeathRegister: 'UNBEATH_REGISTER' as StateEnum,\n        Unregister: 'UNREGISTER' as StateEnum,\n        Register: 'REGISTER' as StateEnum,\n        AlreadyRegister: 'ALREADY_REGISTER' as StateEnum,\n        NotAccessible: 'NOT_ACCESSIBLE' as StateEnum,\n        AlreadyRegisterOrganisation: 'ALREADY_REGISTER_ORGANISATION' as StateEnum,\n        RegisterOrganisation: 'REGISTER_ORGANISATION' as StateEnum\n    };\n}\n\n\n","/**\n * growbe-cloud\n * Cloud server for Growbe\n *\n * The version of the OpenAPI document: 0.0.0\n * Contact: wquintal@berlingoqc.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GroupingDataRequest } from './groupingDataRequest';\n\n\nexport interface ModuleDataRequest { \n    /**\n     * ID of the growbe to get data\n     */\n    growbeId?: string;\n    /**\n     * Module to get the data from\n     */\n    moduleId?: string;\n    /**\n     * Last X Unit of time , default to Date\n     */\n    lastX?: number;\n    lastXUnit?: ModuleDataRequest.LastXUnitEnum;\n    /**\n     * if specify , get data from interval from this date\n     */\n    from?: string;\n    /**\n     * if specify , get data from interval before this date\n     */\n    to?: string;\n    fields?: Array<string>;\n    /**\n     * if true the data will be fetch , only possible with lastX\n     */\n    liveUpdate?: boolean;\n    grouping?: GroupingDataRequest;\n}\nexport namespace ModuleDataRequest {\n    export type LastXUnitEnum = 'Month' | 'Hours' | 'Minutes' | 'Day' | 'Date';\n    export const LastXUnitEnum = {\n        Month: 'Month' as LastXUnitEnum,\n        Hours: 'Hours' as LastXUnitEnum,\n        Minutes: 'Minutes' as LastXUnitEnum,\n        Day: 'Day' as LastXUnitEnum,\n        Date: 'Date' as LastXUnitEnum\n    };\n}\n\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { GrowbeDashboardControllerService } from './api/growbeDashboardController.service';\nimport { GrowbeMainboardControllerService } from './api/growbeMainboardController.service';\nimport { GrowbeModuleControllerService } from './api/growbeModuleController.service';\nimport { GrowbeModuleDefControllerService } from './api/growbeModuleDefController.service';\nimport { GrowbeModuleGraphControllerService } from './api/growbeModuleGraphController.service';\nimport { GrowbeSensorValueControllerService } from './api/growbeSensorValueController.service';\nimport { GrowbeStreamControllerService } from './api/growbeStreamController.service';\nimport { GrowbeWarningControllerService } from './api/growbeWarningController.service';\nimport { PingControllerService } from './api/pingController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"]}